Polymorphism ---> (Poly - Many) + (Morphism - Forms )
At different situation it behaves differently .
Method Overloading - Compile time
Method overriding - Runtime
Method overloading and Method overriding are the two core concepts in java . They are the way to polymorphism in java .

Method Overloading (Compile Time)
class A {
  int a , b , c;
   public void add(int a,int b){
    System.out.println(a+b);
   }
   public void add(int a,int b,int c){
    System.out.println(a+b+c);
   }
}

class Hello{
  public static void main(String args[]){
     A obj = new A();
     obj.add(5,2);
     obj.add(7,8,3);
  }
}
--------------------------------------------------------------------------------------------------------------------------------------------
Method Overriding (Runtime Polymorphism or Dynamic method Dispatch )
If we want to give new definition to some method in parent class , we use method overriding in Java ,to overide the methods .

Defn : When different classes that follow inheritance have the same method with the same name, parameters, and/or return type, it is known as method overriding.

Example - 1 : 
class A {
  public void show(){
     System.out.println("In A show");
  }
  public void display(){
    System.out.println("In A Display ::: ");
  }
}
class B extends A{
  public void show(){
    System.out.println("In B show");
  }
}

class Hello{
  public static void main(String args[]){
     B obj = new B();
     obj.show();
  }
}

// O/P :
In B show
In A Display ::: 

----------------------------------------------------------------------------------------------------------------------------------------------
Example - 2 : 
class A{
   int marks = 10 ;
   public void show(){
    System.out.println("A Marks ::: " + marks);
   }
}

class B extends A{
   public void show(){
    System.out.println("B Marks ::: " + (marks+10));
   }
}

class C extends A{
  public void show(){
    System.out.println("C Marks ::: " + (marks+20));
   }
}

class Hello {
  public static void main (String args[]){
      A obj = new A();
      obj.show();

      obj = new B();
      obj.show();

      obj = new C();
      obj.show();
  }
}

Note : 
=>Methods can be overridden but not variables , So it is clear that A obj = new B() ,but still it points to parent class 'A' for variables .
=>Method overriding is not possible for static methods .Because static methods are not associated with the instance var of a class but deals with the class itself .
=>Dynamic Method Dispatch also known as Runtime Polymorphism .
=>Method overriding is dynamic binding , call to overriden is resolved at runtime.
ie;  JVM cannot determine the method call just by looking at the reference variable only, so it has to wait till runtime to know the type of object and determine which method shall be invoked.


------------------------------------------------------------------------------------------------------------
Note - important 

Compile-Time: The compiler ensures the types and method availability are correct.

Run-Time: The actual object is created, and the appropriate method is invoked based on the object's type.
-----------------------------------------------------------------------------------------------------------
//Here the obj reference is same , method show() is same , but when it is called with diff object , the behaviour is different .
//irrespective of the type of object .
//And this is acceptable only when we have inheritance concept , Parent class having child class .
//A obj = new A() ; obj .show();  ---> A class show gets called .
//B obj = new B() ; obj .show();  ---> B class show gets called .
//C obj = new C() ; obj .show();  ---> C class show gets called .

class Animal{
	public void sound() {
		System.out.println("Animal " );
	}
}
class Cat extends Animal{
	public void sound() {
		System.out.println("Meow meow " );
	}
}

class Dog extends Animal{
	public void sound() {
		System.out.println("Bow Bow " );
	}
}

class Hello{
	public static void main(String args[]) {
		
		Animal ani = new Animal();
		Cat c1 = new Cat();
		Dog d1 = new Dog();
		
		ani.sound();
		c1.sound();
		d1.sound();
		
	}
}

Here with each Class Animal , Cat and Dog differnt sound method is getting called .So Differnt forms/ behavior hat is polymorphism .

**************************************************************************************************************************************


A obj = new A() ; // It creates obj ref for class A and creates new object for class A.
A obj = new B() ; // It creates obj ref for class A and creates new object for class B. So the object connection between 'obj' refernce var and A object is now 
cut and new connection between 'obj' reference and B object is made .

Note : 
By creating an object of class B and assigning it to a reference variable of class A, you can access the methods and variables of class B 
through the reference variable obj.

--------------------------------------------------------------------------------------------------------------------
Feature	Method Overloading	Method Overriding

Polymorphism Type	Compile-time	Run-time
Decision Based On	Reference type	Object type
Inheritance Needed?	No	Yes
Method Signature	Must be different	Must be same

--------------------------------------------------------------------------------------------------------------------
Dynamic Method Dispatch : 
class A{
   int marks = 10 ;
   public void show(){
    System.out.println("A Marks ::: " + marks);
   }
}

class B extends A{
   public void show(){
    System.out.println("B Marks ::: " + (marks+10));
   }
}

class C extends A{
  public void show(){
    System.out.println("C Marks ::: " + (marks+20));
   }
}

class Hello {
  public static void main (String args[]){
      A obj = new A();
      obj.show();

      obj = new B();
      obj.show();

      obj = new C();
      obj.show();


  }
}

Example Of Dynamic Method Dispatch :

Demo.java

package com.testing ;
import com.flowers.*;

class Demo{
	public static void main(String args[]) {
		Flowers f = new Rose() {

			@Override
			public void display() {
				System.out.println("In Anonymous Inner Class Display");
			}
			
		};
		printFlowers(f);
	}
	
	public static void printFlowers(Flowers f) {
		f.display();
	}
}

Flowers.java
package com.flowers;

@FunctionalInterface
public interface Flowers {

	void display();
}

Rose.java
package com.flowers;

public class Rose implements Flowers{

	@Override
	public void display() {
		System.out.println(f);
		System.out.println("Red Rose " );
	}
}

O/P :
com.testing.Demo$1@433c675d
In Anonymous Inner Class Display

Here though we are extending Flowers with Rose type and overriding the method display , At runtime the object is actually instance of inner class . It agains overrides the method display in Rose .
Best example of dynamic method dispatch .

********************************************************************************
Upcasting and Downcasting :

Upcasting :
*Process of converting a child class object to a super class reference in java .  (Child Obj-> Parent Refernce)
*This is implcitly done in java .
*Purpose - Allows you to use polymorphism , where single interface can be used for different datatypes .

Downcasting :
*Process of converting a super class refernce to a child class reference in java . (Parent reference -> Child Reference)
*This is explicitly done in java.
*It allows specific methods and properties of subclass that are not available in the super class .

Example 1 : 


interface Insects{
	void sound();
}
class Bee implements Insects{
	public void sound() {
		System.out.println("Buzz Buzz");
	} 
	
	public void fly() {
		System.out.println("Bees Flying ..");
	}
	
}

class Ant implements Insects{

//sound is overided by the parent sound method 
	public void sound() {
		System.out.println("Chirp Chirp");
	}
	
	public void move() {
		System.out.println("Ants Moving ..");
	}
}

class Sound{
	public void generateSound(Insects i1) {
		i1.sound();
	}
}
class Hello{
	public static void main(String args[]) {
		
		Insects b1 = new Bee(); // Upcasting 
		Insects a1 = new Ant();
		Sound s1 = new Sound();
		s1.generateSound(b1);
		
		Bee b2 = (Bee)b1; // Downcasting 
		b2.fly();
	}
}

O/P :

Buzz Buzz
Bees Flying ..

------------------------------------------------------------------------------------------------------------------------------
Example 2 :

Downcasting might lead to a CastClassException . If the object ref casted is not actually the refernce of the respective instance of the subclass ,
then we face CastClassException . For doing downcasting java takes developer/user approval so we explicitly mention the downcast subclass , If the ref passed
is not the instance of the subclass , then java which believed us is now betrayed and throws CastClassException .

interface Insects{
	void sound();
}
class Bee implements Insects{
	public void sound() {
		System.out.println("Buzz Buzz");
	}
	
	public void fly() {
		System.out.println("Bees Flying ..");
	}
	
}

class Ant implements Insects{
	public void sound() {
		System.out.println("Chirp Chirp");
	}
	
	public void move() {
		System.out.println("Ants Moving ..");
	}
}

class Sound{
	public void generateSound(Insects insects) {
		insects.sound();
		
		if(insects instanceof Bee) {
			Bee b2 = (Bee)insects;
			b2.fly();
		}
		
	}
}
class Hello{
	public static void main(String args[]) {
		
		Insects b1 = new Bee();
		Insects a1 = new Ant();
		Sound s1 = new Sound();
		s1.generateSound(b1);
		
		
	}
}


*************************************************************************************************

class Hello {
  public static void main (String args[]){
    A obj = (A) new B(); // Upcasting - telling the object B - refer to A  
    obj.show();

    //we are not creating a new Object instead making the obj reference is of type B , by having diff object reference name alone , bt not creating new object .
    B obj2 = (B)obj;
    obj2.show2();  // Downcasting obj reference var previously had type A now we have explicitly brought that down to B type .

  }
}
