collection API :
Collection represents a single unit of objects (grp) .
=>It provides readymade Architecture .
=>It reprsents set of classes and interfaces .

Collection framework - unified architecture - storing , sorting , inserting , updating and manipulating a grp of objects .
Collection - Interfaces and its implementation (Classes ())


                                            Iterable (interface)
                                                    |
                                            Collection (interface)
                                                    |
                ------------------------------------------------------------------------------
                |                                   |                                        |  
            List(interface)                    Array (interface)                        Set (interface)
            |                                       |                                        |-->HashSet(classes) 
            |-->ArrayList(classes)                  |                                        |-->LinkedHashSet(classes) 
            |-->LinkedList(classes)                 |                                        |
            |-->vector(classes)                     |                                        |
            |-->Stack(classes)                      |                                        |
            

Array List :

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
class Hello{
    public static void main(String args[]){
        Collection<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);

//Here we are giving the type as int because we have mentioned aove the Collection of type Integer Class .
        for(int n : values){
            System.out.println(n);
        }
        }
    }

//To generically to print values we can go with Collection Interface and the ArrayList class which implements it .
O/P :
3
4
7
---------------------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;;

class Hello{
    public static void main(String args[]){
        List<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);

        System.out.println("Value at index 1 is : " + values.get(1));
        System.out.println("Index of element 4 is : " + values.indexOf(4));
        
        // System.out.println(values);
        // Iterator<Integer> v = values.iterator();
        // while(v.hasNext()){
        //     System.out.println(v.next());
        // }
    }
}


//Here we go with List interface and ArrayList class which implements it to have the index level iteration

O/P :
Value at index 1 is : 4
Index of element 4 is : 1

----------------------------------------------------------------------------------------------------------------------------------------
We can also use iterator to traverse among the ArrayList w/o using forEach

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;;

class Hello{
    public static void main(String args[]){
        List<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);
        values.add(7);

        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :
3
4
7
7

//Here List gives all the values includes duplicate values .

----------------------------------------------------------------------------------------------------------------
Set :
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;

class Hello{
    public static void main(String args[]){
        Set<Integer> values = new HashSet<>();
        values.add(32);
        values.add(4);
        values.add(71);
        values.add(71);
        values.add(23);
        
        
        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :
32
4
71
23

//here in set we get only unique values , though we have 71 twice duplicate values will not be printed in SET .But it is not sorted though .

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

class Hello{
    public static void main(String args[]){
        Set<Integer> values = new TreeSet<>();
        values.add(32);
        values.add(4);
        values.add(71);
        values.add(71);
        values.add(23);
        
        
        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :

4
23
32
71

//Now we get a sorted List , using TreeSet implemented class for Set interface 

---------------------------------------------------------------------------------------------------------------------
Map and HashMap :

Map interface contains a key and value pair .


import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map;
import java.util.HashMap;;

class Hello{
    public static void main(String args[]){
        Map<String,Integer> students = new HashMap<>();
        students.put("Ilaks" , 32);
        students.put("Kavs" , 4);
        students.put("Sundari" ,71);
        students.put("Ravi",71);
        students.put("Meenu",23);
        
        System.out.println(students);
        System.out.println(students.keySet());
        System.out.println(students.values());
        System.out.println(students.size());
        
    }
}

O/P :
{Kavs=4, Ilaks=32, Ravi=71, Meenu=23, Sundari=71}
[Kavs, Ilaks, Ravi, Meenu, Sundari]
[4, 32, 71, 23, 71]
5

-----------------------------------------------------------------------------------------------------------------------------------------------
//To print as Key value pairs in Hashmap 

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map;
import java.util.HashMap;;

class Hello{
    public static void main(String args[]){
        Map<String,Integer> students = new HashMap<>();
        students.put("Ilaks" , 32);
        students.put("Kavs" , 4);
        students.put("Sundari" ,71);
        students.put("Ravi",71);
        students.put("Meenu",23);
        
        // System.out.println(students.keySet());
        for(String name : students.keySet()){
            System.out.println(name + " : " + students.values());
        }
    }
}

O/P :
Kavs : [4, 32, 71, 23, 71]
Ilaks : [4, 32, 71, 23, 71]
Ravi : [4, 32, 71, 23, 71]
Meenu : [4, 32, 71, 23, 71]
Sundari : [4, 32, 71, 23, 71]


Hashtable :
Map<String,Integer> students = new Hashtable<>(); 

If we have multiple threads and to make it synchronized we can use HashTable .
------------------------------------------------------------------------------------------------------------------------------------------------
Collections Class :

Sorting :
Example 1 : Here we are sorting elements based on the length of the String .

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

// Ilaks , Kavs , Pri , Meenuu

class Hello{
    public static void main(String args[]){

        List<String> names = new ArrayList<>();
        names.add("Ilaks");
        names.add("Kavs");
        names.add("Pri");
        names.add("Meenuu");

        Comparator<String> com = new Comparator<>(){

            public int compare(String o1, String o2) {
                if(o1.length() > o2.length()){
                    return 1;
                }
                else 
                    return -1;
            }
        };

       Collections.sort(names, com);
       System.out.println(names);
    }
}

O/P :

[Pri, Kavs, Ilaks, Meenuu]
-------------------------------------------------------------------
Example 2 : Here we are sorting nums in asc order

import java.util.ArrayList;
// import java.util.Collection;
// import java.util.Iterator;
import java.util.List;
// import java.util.HashSet;
// import java.util.Set;
// import java.util.TreeSet;
// import java.util.Map;
// import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;



class Hello{
    public static void main(String args[]){

        List<Integer> nums = new ArrayList<>();
        nums.add(23);
        nums.add(71);
        nums.add(85);
        nums.add(94);

        Comparator<Integer> com = new Comparator<>(){

            public int compare(Integer o1, Integer o2) {
                if(o1 > o2){
                    return 1;
                }
                else 
                    return -1;
            }
        };

       Collections.sort(nums, com);
       System.out.println(nums);
    }
}
O/P :
[23, 71, 85, 94]

Example 3 :
Sorting a developer developed class Fruits with the price 

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

class Fruits {
    String name ;
    int price;
//to have the instance value assigned with a value 
    public Fruits(String name, int price) {
        this.name = name ;
        this.price = price;
    }

//to print a format , as usual when we print object it prints as object.toString
    @Override
    public String toString() {
        return "name=" + name + ", price=" + price ;
    }
}

class Hello{
    public static void main(String args[]){

        Comparator<Fruits> com = new Comparator<>(){

            public int compare(Fruits p1, Fruits p2) {
                if(p1.price > p2.price){
                    return 1;
                }
                else 
                    return -1;
            }
        };

        List<Fruits> fruitsarr = new ArrayList<>();
        fruitsarr.add(new Fruits("Banana" , 50));
        fruitsarr.add(new Fruits("Apple" , 250));
        fruitsarr.add(new Fruits("PineApple" , 80));
        fruitsarr.add(new Fruits("GreenGrapes" , 280));
      
       Collections.sort(fruitsarr,com);

       for(Fruits n : fruitsarr){
        System.out.println(n);
       }
    }
}

O/P :

name=Banana, price=50
name=PineApple, price=80
name=Apple, price=250
name=GreenGrapes, price=280

----------------------------------------------------------------------------------------------------------------------------------

Example 4 :
We are going to use implements Comparable interface with Student Class and have the unimplemented compareTo method within the class .By using this we can have 
comparision within the class itself , No need to call Comparator Class .

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

//Here it is very important to specify <Student> to specify it as ArrayList
class Student implements Comparable<Student>{
    int age;
    String name ;
    
    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }
    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }
    public int compareTo(Student that) {
        if(this.age > that.age){
                        return 1;
                    }
                    else 
                        return -1;
    }
  
}

class Hello{
    public static void main(String args[]){

        // Comparator<Student> com = new Comparator<>(){

        //     public int compare(Student i, Student j) {
        //         if(i.age > j.age){
        //             return 1;
        //         }
        //         else 
        //             return -1;
        //     }
        // };

        List<Student> studs = new ArrayList<>();
        studs.add(new Student(21, "Ilaks"));
        studs.add(new Student(32, "Kavs"));
        studs.add(new Student(49, "Pri"));
        studs.add(new Student(18, "Meenu"));
      
       Collections.sort(studs);

       for(Student n : studs){
        System.out.println(n);
       }
    }
}

O/P:
Student [age=18, name=Meenu]
Student [age=21, name=Ilaks]
Student [age=32, name=Kavs]
Student [age=49, name=Pri]

//Here in the above example if we comment out Comparator lines and in here if we pass comparator object - Collections.sort(studs) 
then the above compareTo will be overrided .

//Below Code we have removed the commented lines and compareTo method will be now overriden .To show I have changed the condition in Comparator and 
it behaves as per the Comparator condition .

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

class Student implements Comparable<Student>{
    int age;
    String name ;

    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }

    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }

   
    public int compareTo(Student that) {
        if(this.age > that.age){
                        return 1;
                    }
                    else 
                        return -1;
    }
  
}

class Hello{
  
    public static void main(String args[]){

        Comparator<Student> com = new Comparator<>(){

            public int compare(Student i, Student j) {
                if(i.age < j.age){
                    return 1;
                }
                else 
                    return -1;
            }
        };

        List<Student> studs = new ArrayList<>();
        studs.add(new Student(21, "Ilaks"));
        studs.add(new Student(32, "Kavs"));
        studs.add(new Student(49, "Pri"));
        studs.add(new Student(18, "Meenu"));
      
       Collections.sort(studs,com);

       for(Student n : studs){
        System.out.println(n);
       }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------
We can use lambda expression as Comparator is a functional interface .On doing lambda expression and changing the condition as ternary operator , 
Code looks like below one ,

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

class Student {
    int age;
    String name ;

    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }

    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }

   
}

class Hello{
  
    public static void main(String args[]){

        Comparator<Student> com = (i, j) -> (i.age > j.age) ? 1 : -1 ;
                // if(i.age < j.age){
                //     return 1;
                // }
                // else 
                //     return -1;
         
        List<Student> studs = new ArrayList<>();
        studs.add(new Student(21, "Ilaks"));
        studs.add(new Student(32, "Kavs"));
        studs.add(new Student(49, "Pri"));
        studs.add(new Student(18, "Meenu"));
      
       Collections.sort(studs,com);

       for(Student n : studs){
        System.out.println(n);
       }
    
}
}

O/P :

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

class Student {
    int age;
    String name ;

    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }

    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }

   
}

class Hello{
  
    public static void main(String args[]){

        Comparator<Student> com = (i, j) -> (i.age > j.age) ? 1 : -1 ;
                // if(i.age < j.age){
                //     return 1;
                // }
                // else 
                //     return -1;
         
        List<Student> studs = new ArrayList<>();
        studs.add(new Student(21, "Ilaks"));
        studs.add(new Student(32, "Kavs"));
        studs.add(new Student(49, "Pri"));
        studs.add(new Student(18, "Meenu"));
      
       Collections.sort(studs,com);

       for(Student n : studs){
        System.out.println(n);
       }
    
}
}

O/P :

Student [age=49, name=Pri]
Student [age=32, name=Kavs]
Student [age=21, name=Ilaks]
Student [age=18, name=Meenu]
------------------------------------------------------------------------------------------------------------------------------------------------
Array :

class Hello{
    public static void main(String args[]){
     String flowers[] = new String[4];
     String flowers[] = {"rose","jasmine","lotus","hibiscus"};
     System.out.println(flowers[2]);
    }
}

O/P : 
lotus

Arrays :
1)Size never changes once initialized .
2)Arrays can hold primitive or objects .(String - objects , Primitive - int , char , float)
3)To calculate the length of the array - System.out.println(flowers.length);
4)To print any index value in array - System.out.println(flowers[2]);
5)Cannot add new elements in an array . As array size is fixed .
6)To replace an element in an array 
     fruitsList.set(2,"papaya");
     System.out.println(fruitsList.get(2));
7)We cant remove elements in array .As array size is fixed .
8)To print elements in array 

  String flowers[] = {"rose","lotus","lily"};

     for(int i=0;i<flowers.length;i++){
        System.out.println(flowers[i]);
     }

O/P :

Student [age=49, name=Pri]
Student [age=32, name=Kavs]
Student [age=21, name=Ilaks]
Student [age=18, name=Meenu]
**********************************************************************************************************************************************************
ArrayList :

import java.util.ArrayList;
import java.util.Arrays;

class Hello{
    public static void main(String args[]){
     
     ArrayList<String> fruitsList = new ArrayList<>(Arrays.asList("banana" ,"mango","apple","grapes")); 
     System.out.println(fruitsList.get(3));
    }
}

O/P : 
grapes 

ArrayList :
1)Size grows and shrinks automatically .
2)ArralyList can hold objects .But supports wrapper types for primitive .
3)To calculate the length of the ArrayList - System.out.println(fruitsList.size());
4)To print any index value in array - System.out.println(fruitsList.get(3));
5)In ArrayList we can add new elements 

     fruitsList.add("watermelon");
     System.out.println(fruitsList.get(4));
6)To replace an element in an array 

     fruitsList.set(2,"papaya");
     System.out.println(fruitsList.get(2));
7)To remove elements in array .Once removed the element , the size of the array decreases .

System.out.println(fruitsList.size());
     fruitsList.remove(2);
     System.out.println(fruitsList.size());
8)To print elements in ArrayList 

  System.out.println(fruitsList);

