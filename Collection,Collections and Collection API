collection API :
Collection represents a single unit of objects (grp) .
=>It provides readymade Architecture .
=>It reprsents set of classes and interfaces .

Collection framework - unified architecture - storing , sorting , inserting , updating and manipulating a grp of objects .
Collection - Interfaces and its implementation (Classes ())


                                            Iterable (interface)
                                                    |
                                            Collection (interface)
                                                    |
                ------------------------------------------------------------------------------
                |                                   |                                        |  
            List(interface)                    Array (interface)                        Set (interface)
            |                                       |                                        |-->HashSet(classes) 
            |-->ArrayList(classes)                  |                                        |-->LinkedHashSet(classes) 
            |-->LinkedList(classes)                 |                                        |
            |-->vector(classes)                     |                                        |
            |-->Stack(classes)                      |                                        |
            

Array List :

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
class Hello{
    public static void main(String args[]){
        Collection<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);

//Here we are giving the type as int because we have mentioned aove the Collection of type Integer Class .
        for(int n : values){
            System.out.println(n);
        }
        }
    }

//To generically to print values we can go with Collection Interface and the ArrayList class which implements it .
O/P :
3
4
7
---------------------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;;

class Hello{
    public static void main(String args[]){
        List<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);

        System.out.println("Value at index 1 is : " + values.get(1));
        System.out.println("Index of element 4 is : " + values.indexOf(4));
        
        // System.out.println(values);
        // Iterator<Integer> v = values.iterator();
        // while(v.hasNext()){
        //     System.out.println(v.next());
        // }
    }
}


//Here we go with List interface and ArrayList class which implements it to have the index level iteration

O/P :
Value at index 1 is : 4
Index of element 4 is : 1

----------------------------------------------------------------------------------------------------------------------------------------
We can also use iterator to traverse among the ArrayList w/o using forEach

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;;

class Hello{
    public static void main(String args[]){
        List<Integer> values = new ArrayList<>();
        values.add(3);
        values.add(4);
        values.add(7);
        values.add(7);

        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :
3
4
7
7

//Here List gives all the values includes duplicate values .

----------------------------------------------------------------------------------------------------------------
Set :
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;

class Hello{
    public static void main(String args[]){
        Set<Integer> values = new HashSet<>();
        values.add(32);
        values.add(4);
        values.add(71);
        values.add(71);
        values.add(23);
        
        
        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :
32
4
71
23

//here in set we get only unique values , though we have 71 twice duplicate values will not be printed in SET .But it is not sorted though .

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

class Hello{
    public static void main(String args[]){
        Set<Integer> values = new TreeSet<>();
        values.add(32);
        values.add(4);
        values.add(71);
        values.add(71);
        values.add(23);
        
        
        Iterator<Integer> v = values.iterator();
        while(v.hasNext()){
            System.out.println(v.next());
        }
    }
}

O/P :

4
23
32
71

//Now we get a sorted List , using TreeSet implemented class for Set interface 

---------------------------------------------------------------------------------------------------------------------
Map and HashMap :

Map interface contains a key and value pair .


import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map;
import java.util.HashMap;;

class Hello{
    public static void main(String args[]){
        Map<String,Integer> students = new HashMap<>();
        students.put("Ilaks" , 32);
        students.put("Kavs" , 4);
        students.put("Sundari" ,71);
        students.put("Ravi",71);
        students.put("Meenu",23);
        
        System.out.println(students);
        System.out.println(students.keySet());
        System.out.println(students.values());
        System.out.println(students.size());
        
    }
}

O/P :
{Kavs=4, Ilaks=32, Ravi=71, Meenu=23, Sundari=71}
[Kavs, Ilaks, Ravi, Meenu, Sundari]
[4, 32, 71, 23, 71]
5

-----------------------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map;
import java.util.HashMap;;

class Hello{
    public static void main(String args[]){
        Map<String,Integer> students = new HashMap<>();
        students.put("Ilaks" , 32);
        students.put("Kavs" , 4);
        students.put("Sundari" ,71);
        students.put("Ravi",71);
        students.put("Meenu",23);
        
        // System.out.println(students.keySet());
        for(String name : students.keySet()){
            System.out.println(name + " : " + students.values());
        }
    }
}

O/P :
Kavs : [4, 32, 71, 23, 71]
Ilaks : [4, 32, 71, 23, 71]
Ravi : [4, 32, 71, 23, 71]
Meenu : [4, 32, 71, 23, 71]
Sundari : [4, 32, 71, 23, 71]

------------------------------------------------------------------------------------------------------------------------------------------------
Array :

class Hello{
    public static void main(String args[]){
     String flowers[] = new String[4];
     String flowers[] = {"rose","jasmine","lotus","hibiscus"};
     System.out.println(flowers[2]);
    }
}

O/P : 
lotus

Arrays :
1)Size never changes once initialized .
2)Arrays can hold primitive or objects .(String - objects , Primitive - int , char , float)
3)To calculate the length of the array - System.out.println(flowers.length);
4)To print any index value in array - System.out.println(flowers[2]);
5)Cannot add new elements in an array . As array size is fixed .
6)To replace an element in an array 
     fruitsList.set(2,"papaya");
     System.out.println(fruitsList.get(2));
7)We cant remove elements in array .As array size is fixed .
8)To print elements in array 

  String flowers[] = {"rose","lotus","lily"};

     for(int i=0;i<flowers.length;i++){
        System.out.println(flowers[i]);
     }

**********************************************************************************************************************************************************
ArrayList :

import java.util.ArrayList;
import java.util.Arrays;

class Hello{
    public static void main(String args[]){
     
     ArrayList<String> fruitsList = new ArrayList<>(Arrays.asList("banana" ,"mango","apple","grapes")); 
     System.out.println(fruitsList.get(3));
    }
}

O/P : 
grapes 

ArrayList :
1)Size grows and shrinks automatically .
2)ArralyList can hold objects .But supports wrapper types for primitive .
3)To calculate the length of the ArrayList - System.out.println(fruitsList.size());
4)To print any index value in array - System.out.println(fruitsList.get(3));
5)In ArrayList we can add new elements 

     fruitsList.add("watermelon");
     System.out.println(fruitsList.get(4));
6)To replace an element in an array 

     fruitsList.set(2,"papaya");
     System.out.println(fruitsList.get(2));
7)To remove elements in array .Once removed the element , the size of the array decreases .

System.out.println(fruitsList.size());
     fruitsList.remove(2);
     System.out.println(fruitsList.size());
8)To print elements in ArrayList 

  System.out.println(fruitsList);

