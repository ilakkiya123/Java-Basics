Constructor :-
==>It is a special method with its name as the name of the class name .
==>Everytime when we create an object , constructor gets called .
==>Constructor never returns anything .

Types Of Constructor : 
*Default Constructor 
*Parametrized Constructor 

class House{
    String name ;
    int year ;
    //Default Constructor 
    public House(){
      System.out.println("In Constructor : ");
    }
    //Parametrized Constructor 
    public House(String n , int y){
      System.out.println("The name of my home is : " + n + " and built year is : " + y);
    }
}
class Hello {
  public static void main(String args[]){
     House h1 = new House();
     House h2 = new House("Anbagam" , 2014);
  }
}

--------------------------------------------------------------------------------------------------
this Keyword in constructors :

class Toys{
private String n;
private int price;

public String getName(){
   return n;
}
public void setName(String n){
  this.n = n;
}
}
class Hello{
  public static void main(String args[]){
    Toys t1 = new Toys();
    t1.setName("Barbie Doll");
    System.out.println(t1.getName());;
  }
}

Here this.n = n , represents that value in local var 'n' should be assigned to instance variable n .If we have multiple object , our compiler to identify 
if we give 'this' keyword then it represents the object by which the method is called and assign to that object 'n' ie; the value of the 
local variable is assigned to the instance variable .

class Colours{
  String color;
  public Colours(){
    System.out.println("In Default Constructor : ");
  }
  public Colours(String color){
    this.color = color; 
    System.out.println(this.color + " : In Para Constructor : ");//Directly printed only this.color
  }
  
}
class Hello {
  public static void main (String args[]){
    Colours c1 = new Colours();
    Colours c2 = new Colours("Green");

  }
}

O/P :
In Default Constructor : 
Green : In Para Constructor : 

---------------------------------------------------------------------------------------------------------------
this keyword and super() method 

class A {
   
   public A(){
    super();//Default it is present 
    System.out.println("In A");
   }
}
class B extends A{
  public B(){
    super();
    System.out.println("In B ");
  }
}
class Hello {
  public static void main (String args[]){
     B obj = new B();
  }
}

O/P : 
In A
In B 

Note : Here we are creating an object for B class , but we are seeing value from A constructor . Because subclass always calls a super class and it prints
that value as well .

Note : Every Constructor(includes parametrized constructor) in java has a method in java and that is a super() method .It is the first statement in Every Constructor.
First statement of constructor is super().
super() --- > Calls the constructor of super class .Present inside a constructor .Since Parent class Inheritance concept is mandatory to perform super().'extends' keyword is must .  
this() ---> calls the default constructor of existing class .

************************************************************************************************************************
Can we have both this() and super() in same constructor .

1)The invocation of this() and super() must be the first line of the constructor .
2)Both are responsible for invoking constructor , so they cannot be used in same constructor .
3)this() can invoke constructors of same class , same method and same instance variable of existing class.
4)super() can invoke constructors of parent class , immediate parent class methods and variables .

*************************************************************************************************************************
class A {
   public A(){
    super();
    System.out.println("In A");
   }
   public A(int n){
    super();
    System.out.println("In A in int");
   }
}
class B extends A{
  public B(){
    super();
    System.out.println("In B ");
  }
  public B(int n){
    super();
    System.out.println("In B in int");
  }
}
class Hello {
  public static void main (String args[]){
     B obj = new B(8);
     //A obj1= new A();
  }
}

----------------------------------------------------------------------------------------
Every class in java extends object class .
super() --- > Calls the constructor of super class .

1)super() class can be used to invoke immediate parent class instance variable , immediate parent class methods , immediate parent class constructors .

Invoke Immediate class instance variable :
class A{
  String color = "white";
}
class B extends A{
  String color = "purple";
  public void display(){
    System.out.println(color);
    System.out.println(super.color);
  }
}
class Hello{
  public static void main(String args[]){
     B obj = new B();
     obj.display();
  }
}
***********************************************************************************

this() ---> calls the constructor of existing class .To call parametrized constructor pass parameters in this(n) .
Multi Level Inheritance .
=>B extends A
=>A extends Object Class

class A extends Object{
   public A(){
    super();//this calls the constructor of Object Class
    System.out.println("In A");
   }
   public A(int n){
    super();
    System.out.println("In A in int");
   }
}
class B extends A{
  public B(){
    super();
    System.out.println("In B ");
  }
  public B(int n){
    this();//calls the default constructor here it is B class 
    System.out.println("In B in int");
  }
}
class Hello {
  public static void main (String args[]){
     B obj = new B(8);
  }
}

O/P : 
In A
In B 
In B in int

Object Class :

Every time when we try to print object , it calls toString method
Object has many methods it in , for eg : toString , equals()

class Fruits {
  String name ;
  int price ;

//toString --- It is already present in Object class , but as we know first it will check in existing class then will go to super class (here it is Object class) .So this toString method only get executes.
  public String toString(){
    return name + " : " + price;
  }

//our equals method checks only the values , It is always better to go with the IDE source generate equals.
  public boolean equals(Fruits obj){
     return (this.name.equals(obj.name)) && (this.price == obj.price); // here we didnt put if else to print T/F bcoz String itself compares and returns T/F
  }

}

class Hello {
  public static void main (String args[]){
    Fruits c1 = new Fruits();
    c1.name = "Watermelon";
    c1.price = 100;

    Fruits c2 = new Fruits();
    c2.name = "Watermelon";
    c2.price = 100;
    System.out.println(c1.equals(c2));//when before defining our equals() method we got false bcoz the equal() method present in Object class compares both values as well as hash code .
    System.out.println(c1);
  }
}

------------------------------------------------------------------------------------------------------
class Fruits {
    String name ;
    int price ;
    
    public void show(Fruits f2){
        System.out.println("f1 object ref values :: " + name + " : "+price);
        System.out.println("f2 object ref values :: " +f2.name + " : "+f2.price);
        
    }
}

class Hello{
    public static void main(String args[]){
        Fruits f1 = new Fruits();
        f1.name = "Apple";
        f1.price = 100 ;

        Fruits f2 = new Fruits();
        f2.name = "Orange";
        f2.price = 80 ;

        f1.show(f2);
    }
}

Here In above example we are calling ---> f1.show(f2);

O/P
f1 object ref values :: Apple : 100
f2 object ref values :: Orange : 80

So to Fruits class we called show method with f1 obj ref ,So we can directly print the instance variable itself .
And for f2 we are passing it as an object in parameter, so we need to print as f2.name and f2.price .
--------------------------------------------------------------------------------------------------------

Note : 
Which is called first constructor or object creation ? 

Actually at this line , A obj = new A();
A memory is allocated for obj of type 'A' , then it calls the constructor then the flow goes . 

O/P :
true
Watermelon : 100
