Enum - enum is  a special class , that represents group of constants similar to Final(unchangeable var). 
==> Enumeration is a short name for enum , specifically Listed.Enum Constants are public , static , final
Enum with For loop :

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Pending; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     Status arr[] = Status.values(); // gives as a list of all the values
    
     for (int i=0 ; i<arr.length;i++){
      System.out.println(i + " : " + arr[i]);
     }
  }
}

Enum with If Else Block 

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Completed; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     Status arr[] = Status.values(); // gives as a list of all the values
    
     //s == "Running" - Here If I try to give like this , It says - Incompatible operand types String and Status 
     if (s == Status.Running){
        System.out.println("Pls wait , its running !!! ");
     }
     else if (s == Status.Completed){
        System.out.println("Hurray Completed!!! ");
     }
     else if (s == Status.Pending){
        System.out.println("Pls wait , its pending !!! ");
     }
     else {
      System.out.println("Wait Pls !!! ");
     }
  }
}

O/P :
Index of Completed : 1
Hurray Completed!!! 

----------------------------------------------------------------------------------
Enum with switch ()

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Completed; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     
    switch (s.ordinal()) {  //switch(s)
      case 0: //case Running :
        System.out.println("Pls wait , its running !!! ");
        break;
      case 1: //case Completed
        System.out.println("Hurray Completed!!! ");
        break;
      case 2: //case Pending
        System.out.println("Pls wait , its pending !!! ");
        break;
      case 3://case Waiting
        System.out.println("Wait Pls !!! ");
        break;    
      default:
        System.out.println("Pls Enter validate Status: ");
        break;
     }
    }
  }

Note : As like other classes in enum there is no inheritance , we cant use extend keyword .
=== > we can define method , constructors , create own var is possible 

//Enum By default has a Enum Class 
System.out.println(s.getClass().getSuperclass()); ------  class java.lang.Enum

---------------------------------------------------------------------------------------------------------------
If we got doubt , How object() ---> is a constructor have the below example for reference .

class Fruits{
    public Fruits(){

    }
}

class Apple extends Fruits{
    public Apple(String name ,String color){
         System.out.println(name + " : " +color);
    }
}
class Banana extends Fruits{
    public Banana(String name,String color){
       System.out.println(name + " : " +color);
    }
}

class Hello {
  public static void main (String args[]){
    Fruits f1 = new Apple("Apple" , "red");
    f1 = new Banana("Banana" , "yellow");
    
    
  }
}  
-----------------------------------------------------------------------------------------------
Enum Methods ,Constructors , private variables 

//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana("yellow"),Grapes("green") ;
  private String colour;

  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    Fruits f1 = Fruits.Grapes;
    System.out.println(f1 + " : " + f1.getColour());
  }
}

//O/P :
Grapes : green

*******************************************************************
To get all values in the List :
//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana("yellow"),Grapes("green") ;
  private String colour;

  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    // Fruits f1 = Fruits.Grapes;
    // System.out.println(f1 + " : " + f1.getColour());

    Fruits arr[] = Fruits.values();
    // for (int i=0;i<arr.length;i++){
    //   System.out.println(arr[i] + " : " + arr[i].getColour());
    // }
    for(Fruits n:arr){
      System.out.println(n + " : " + n.getColour());
    }

  }
}

O/P : 
Apple : red
Orange : orange
Banana : yellow
Grapes : green

************************************************************************************

//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana,Grapes("green") ;//Since here banana is not having parameter errors throws ,need to create default constructor
  private String colour;

 

  private Fruits() {
    // this.colour = "Yellow";
  }

//We have created private Constructor .Since we are using obj and var in same class .
  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    // Fruits f1 = Fruits.Grapes;
    // System.out.println(f1 + " : " + f1.getColour());

    Fruits arr[] = Fruits.values();
    // for (int i=0;i<arr.length;i++){
    //   System.out.println(arr[i] + " : " + arr[i].getColour());
    // }
    for(Fruits n:arr){
      System.out.println(n + " : " + n.getColour());
    }

  }
}

O/P :
Apple : red
Orange : orange
Banana : null
Grapes : green
