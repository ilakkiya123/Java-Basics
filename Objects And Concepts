Create new Object 
class Sum{
  public void Addition(int i,int j){
     System.out.println(i+j);
  }
}

class Hello{
  public static void main (String arg[]){
    int a = 10;
    int b = 20;
    Sum s = new Sum();//created a new object
    s.Addition(a,b);//calling Addition Method from Hello Class by giving s as reference variable of Sum class
  }
}

**********************************************************
Method overloading :[Same method we are trying to call for example "add method" but with differnt count of arguments]

//1)No of Arguments in method
//2)Different datatypes for the argument 
//3)But changing datatype of method just throws error 

class Addition {
   public void add(int i,int j){
       System.out.println("addTwo : " + (i+j));
   }
   public void add(int i,int j,int k){
       System.out.println("addTwo : " + (i+j+k));
   }
}
class Hello {
  public static void main(String args[]){
    int a =10;
    int b =20;
    int c =30;
    int d =40;
    Addition obj = new Addition() ;
    obj.add(a,b);
    obj.add(a,b,c);
}
}

---------------------------------------------------------------
instance variable --- > It has scope inside the entire class , which means once you change a value in a method in a class then that change will reflect in 
other method also if the particular instance is used .
                  ---> Instance Variable part of Heap Memory .


local variable ---> It has scope inside the method of a particular class .
               --- > Local Variable part of stack (Methods) .

--------------------------------------------------------------------------------------------
Ananymous Object : 

class A{
   public A(){
      System.out.println("Object created : ");
   }

   public void show(){
    System.out.println("In show method ");
   }
}
class Hello {
  public static void main (String args[]){
     //A obj = new A();// this line has 2 steps 
     //A obj - reference variable for class A 
     //new A() - creates a new Object otherwise called as Ananymous Object 

     new A().show();
     new A().show();// if we use individually new A() , then we cant reuse this object .Everytime new Object gets created .



  }
}

O/P :
Object created : 
In show method 
Object created : 
In show method 
               
***********************************************************************************************************
Method Overriding :(Overriding is a feature that allows a subclass to provide a different behaviour for a method which is already present in super class , 
The method present in subclass has the same name , same method and same return type as super class , then the subclass overrides the method in super class .
)

class Calc{
  public int add(int n1 , int n2){
      return n1+n2;  // same add method ,same parameters , same return type .
  }

  public int sub(int n1 , int n2){
      return n1-n2;
  }

  public int mul(int n1 , int n2){
      return n1*n2;
  }

  public int div(int n1 , int n2){
      return n1/n2;
  }
}

class AdvCalc extends Calc{
  public int add(int n1 , int n2){
      int n3 = 10;
      return n1+n2+n3; //same add method ,same parameters , same return type but behavior is different from super class.This method overrides parent class method
  }
}

class Hello {
  public static void main (String args[]) {
     AdvCalc c1 = new AdvCalc();
     int r1 = c1.add(10,20 );
     int r2 = c1.sub(50,20 );
     int r3 = c1.mul(3,20 );
     int r4 = c1.div(60,20 );
     System.out.println(r1 + " " + r2 + " " + r3 + " " + r4 );
  }
}

