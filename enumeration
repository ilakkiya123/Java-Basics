Enum - enum is  a special class , that represents group of constants similar to Final(unchangeable var). 
==> Enumeration is a short name for enum , named constants .Enum Constants are public , static , final .

Here , 
enum Color { 
RED , GREEN , YELLOW ; 
} 

Here Color is a class and RED , GREEN and YELLOW is the named constants or instances .

Regular class :
A obj = new A() ;
obj.show() ;

Enum :
==> We refer color as a class , but we cant create an obj like Color obj = new Color(); , because RED , GREEN , YELLOW are created automatically when enum type is loaded .And these are the instances for Color .
And also in regular class we say obj.methods , but here first to refer the instance and that also since these instances are static , we call as Color.RED (Enumtype.instnace) which means the RED instance and with which you can 
call the methods like Color.RED.methods .No other instance can be created .

==> Enum is type safe to work with fixed set of constants .
==> Other than Enum (java.lang.Enum) I cant extend any other class in java .

Enum with For loop :

Example 1 :

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Pending; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     Status arr[] = Status.values(); // gives as a list of all the values
    
     for (int i=0 ; i<arr.length;i++){
      System.out.println(i + " : " + arr[i]);
     }
  }
}

Example 2 :

enum TrafficLights{
	// named constants or group of list under traffic lights or instance of traffic lights
	RED , YELLOW , GREEN ;  
}
class Hello{
	public static void main(String args[]) {
		TrafficLights tf1 = TrafficLights.RED ;
		TrafficLights tf2 = TrafficLights.YELLOW ;
		TrafficLights tf3 = TrafficLights.GREEN ;
		
		for(TrafficLights t : TrafficLights.values()) {
			System.out.println(t);
		}
	}
}

Enum with If Else Block 
Example 1 :

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Completed; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     Status arr[] = Status.values(); // gives as a list of all the values
    
     //s == "Running" - Here If I try to give like this , It says - Incompatible operand types String and Status 
     if (s == Status.Running){
        System.out.println("Pls wait , its running !!! ");
     }
     else if (s == Status.Completed){
        System.out.println("Hurray Completed!!! ");
     }
     else if (s == Status.Pending){
        System.out.println("Pls wait , its pending !!! ");
     }
     else {
      System.out.println("Wait Pls !!! ");
     }
  }
}

O/P :
Index of Completed : 1
Hurray Completed!!! 

Example 2 :

enum TrafficLights{
	// named constants or group of list under traffic lights or instance of traffic lights
	RED , YELLOW , GREEN ;  
}
class Hello{
	public static void main(String args[]) {
		TrafficLights tf1 = TrafficLights.RED ;
		TrafficLights tf2 = TrafficLights.YELLOW ;
		TrafficLights tf3 = TrafficLights.GREEN ;
		
		if(tf3 == TrafficLights.RED) {
			System.out.println("STOP ");
		}
		else if (tf3 == TrafficLights.YELLOW) {
			System.out.println("PLS WAIT ABOUT To MOVE");
		}
		else {
			System.out.println("GO");
		}
	}

----------------------------------------------------------------------------------
Enum with switch ()

Example 1 :

enum Status{
  Running , Completed , Pending , Waiting ;//Are all objects - named constants
}
class Hello {
  public static void main(String args[]){
     Status s = Status.Completed; // only the list present in Status class can be added .
     System.out.println("Index of " + s + " : "+ s.ordinal());//s currently have pending to check index of Pending we use ordinal .ordinal starts with index 0 .
     
    switch (s.ordinal()) {  //switch(s)
      case 0: //case Running :
        System.out.println("Pls wait , its running !!! ");
        break;
      case 1: //case Completed
        System.out.println("Hurray Completed!!! ");
        break;
      case 2: //case Pending
        System.out.println("Pls wait , its pending !!! ");
        break;
      case 3://case Waiting
        System.out.println("Wait Pls !!! ");
        break;    
      default:
        System.out.println("Pls Enter validate Status: ");
        break;
     }
    }
  }

Example 2 :

enum TrafficLights{
	// named constants or group of list under traffic lights or instance of traffic lights
	RED , YELLOW , GREEN ;  
}
class Hello{
	public static void main(String args[]) {
		TrafficLights tf1 = TrafficLights.RED ;
		TrafficLights tf2 = TrafficLights.YELLOW ;
		TrafficLights tf3 = TrafficLights.GREEN ;
		
		switch(tf3) {
		case RED : 
			System.out.println("STOP");
			break ;
			
		case YELLOW : 
			System.out.println("WAIT");
			break ;
			
		case GREEN : 
			System.out.println("GO");
			break ;
			
		default :
			System.out.println("Please follow Traffic Rules ");
		}
	}
}

---------------------------------------------------------------------------------------------------------------

Note : As like other classes in enum there is no inheritance , we cant use extend keyword .Because Implicitly it has enum class extended .

//Enum By default has a Enum Class 
System.out.println(s.getClass().getSuperclass()); ------  class java.lang.Enum

=== > we can define method , constructors , create own var is possible 

-----------------------------------------------------------------------------------------------
Enum Methods ,Constructors , private variables 

Example 1 :

//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana("yellow"),Grapes("green") ;
  private String colour;

  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    Fruits f1 = Fruits.Grapes;
    System.out.println(f1 + " : " + f1.getColour());
  }
}

//O/P :
Grapes : green


Example 2 :

enum TrafficLights{
	// named constants or group of list under traffic lights or instance of traffic lights
	RED("STOP") , YELLOW("WAIT") , GREEN("GO") ;  
	
	private String command ;
	
	private TrafficLights(String command) {
		this.command = command ;
	}

	public String getCommand() {
		return command;
	}
}
class Hello{
	public static void main(String args[]) {
		TrafficLights tf1 = TrafficLights.RED;
		TrafficLights tf2 = TrafficLights.YELLOW;
		TrafficLights tf3 = TrafficLights.GREEN ;
		
		System.out.println(tf3.getCommand());

	}
}

O/P : 
GO

*******************************************************************
To get all values in the List :

Example 1 :

//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana("yellow"),Grapes("green") ;
  private String colour;

  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    // Fruits f1 = Fruits.Grapes;
    // System.out.println(f1 + " : " + f1.getColour());

    Fruits arr[] = Fruits.values();
    // for (int i=0;i<arr.length;i++){
    //   System.out.println(arr[i] + " : " + arr[i].getColour());
    // }
    for(Fruits n:arr){
      System.out.println(n + " : " + n.getColour());
    }
  }
}

O/P : 
Apple : red
Orange : orange
Banana : yellow
Grapes : green

Example 2 :

enum TrafficLights{
	// named constants or group of list under traffic lights or instance of traffic lights
	RED("STOP") , YELLOW("WAIT") , GREEN("GO") ;  
	
	private String command ;
	
	private TrafficLights(String command) {
		this.command = command ;
	}

	public String getCommand() {
		return command;
	}
}
class Hello{
	public static void main(String args[]) {
		TrafficLights tf1 = TrafficLights.RED;
		TrafficLights tf2 = TrafficLights.YELLOW;
		TrafficLights tf3 = TrafficLights.GREEN ;
		
		for ( TrafficLights  t : TrafficLights.values()) {
			System.out.println(t + " : " + t.getCommand());
		}

	}
}

O/P :
RED : STOP
YELLOW : WAIT
GREEN : GO
************************************************************************************

//enum is a special class , class name - Fruits .So constructor creates with Fruits
enum Fruits {
  Apple("red"),Orange("orange"),Banana,Grapes("green") ;//Since here banana is not having parameter errors throws ,need to create default constructor
  private String colour;

 

  private Fruits() {
    // this.colour = "Yellow";
  }

//We have created private Constructor .Since we are using obj and var in same class .
  private Fruits(String colour) {
    this.colour = colour;
  }

  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }

}


class Hello{
  public static void main(String[] args) {
    // Fruits i 0 = Fruits.Grapes;
    // System.out.println(f1 + " : " + f1.getColour());

    Fruits arr[] = Fruits.values();
    // for (int i=0;i<arr.length;i++){
    //   System.out.println(arr[i] + " : " + arr[i].getColour());
    // }
    for(Fruits n:arr){
      System.out.println(n + " : " + n.getColour());
    }

  }
}

O/P :
Apple : red
Orange : orange
Banana : null
Grapes : green
