//Types of Errors : 
1)Compile time error - syntatical errors .
2)Runtime error - Stops the execution - Code is fine , but file not found .
3)Logical error - Some logic is missing so that when we try to print the expected output is not printed .


---------------------------------------------------------------------------------------------------------------------------------------------------
Runtime Exception - Here since this line ---> result = i/j; it throws exception when denominator is '0' . We are catching that error . Our java throws it as an object , so we should use Exception class with 
'e' obj . ANy obj naming we can use .

class Hello {
  public static void main(String args[]){
    int i = 10;
    int j = 0;
    try{
    int result = i/j;
    }
    catch(Exception e){
      System.out.println("ArithmeticException: / by zero");
    }
    System.out.println(i  + " " + j);

  }
}

O/P :
ArithmeticException: / by zero
10 0

------------------------------------------------------------------------------------------------------------------------------------------------------
class Hello{
  public static void main (String args[]){
    int i = 10;
    int j = 1;

    int arr[] = new int[3];

    String s = null ;

    try {
      System.out.println(s.length());
      System.out.println(i/j);
      arr[3] = 12;
    } 
    catch (ArithmeticException e) {
      System.out.println(e);
    }
    catch(ArrayIndexOutOfBoundsException e){
      System.out.println(e);
    }
    catch(Exception e){
      System.out.println("Something went wrong ..." +  e);
    }
    
System.out.println("End I m Here !!! ");
  }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------
Diff Exceptions :


class Hello{
  public static void main (String args[]){
    int i = 10;
    int j = 1;

    int arr[] = new int[3];

    String s = null ;

    try {
      System.out.println(s.length());// suppose this line is error , it will directly go to exception block 
      System.out.println(i/j);
      arr[3] = 12;
    } 
    catch (ArithmeticException e) {
      System.out.println(e);
    }
    catch(ArrayIndexOutOfBoundsException e){
      System.out.println(e);
    }
    // Here Exception block should come at the last , bcoz it is parent class and if we put that before arithmetic and array bound exception , then Exception class handle those exception as well , So other 2 catch becomes useless .
//To specifically Identify we should use exception class at the last .
    catch(Exception e){
      System.out.println("Something went wrong ..." +  e);
    }
    
System.out.println("End I m Here !!! ");
  }
}

***************************************************************************************************************
                                           Exception Hierarchy :

                                     Object 
                                       |
                                    Throwable
                                       |
             ----------------------------------------------------------
             |                                                        |
           Error                                                   Exception(many more Exceptions are also there )
             |                                                        |
  ---------------------------------                   -----------------------------------------------    
  |                |              |                   |                      |                      | 
 ThreadDeath       |            IO Error      Runtime Exception           SQL Exception          IO Exception
                   |                                  |                              |             |
             VirtualMachineError                1)ArithmeticException                ---------------
            (Out Of Memory Error)               2)ArrayIndexOutOfBoundsException            |
                                                3)NullPointerException                  (checked Exception)
                                                (Unchecked Exception)

Note : Checked Exception should be compulsorily Handled by the developer .


***********************************************************************************************************************
//Note : Here when we write i/j by giving i= 10 , j=0 , we get infinity =>java.lang.ArithmeticException: / by zero
//Note : Here when we write i/j by giving i= 10 , j=20 , then also quo is zero , res is zero but now =>java.lang.ArithmeticException 
class Hello{
  public static void main (String args[]) {

    int i = 10;
    int j = 20;

    try {
      int res = i/j;
      System.out.println(res);
      if(res == 0) 
        //line to create new object for ArithmeticException - trying to throw error
         throw new ArithmeticException("When result is zero I am throwing Exception");//parametrized constructor
    } 
    catch (ArithmeticException e) {
      System.out.println(i/1 + " Gives the numerator .... " + e);//Handling Exception instead just printing we are trying for another solution 
    }catch(Exception e){
      System.out.println("Something went wrong ..." +  e);
    }
    
System.out.println("End I m Here !!! ");
  }
}

************************************************************************************************************************
Create My Own Exception : 

class MyException extends Exception{
 public MyException(String s){
  //Exception Class has a constructor that prints the string , here Exception is the super class () 
  super(s);
 }
}
class Hello{
  public static void main (String args[]) {

    int i = 10;
    int j = 20;

    try {
      int res = i/j;
      System.out.println(res);
      if(res == 0) 
         throw new MyException("res is zero prints default value ... ");//parametrized constructor 
    } 
    catch (MyException e) {
      System.out.println(i/1 + " Gives the numerator .... " + e);
    }catch(Exception e){
      System.out.println("Something went wrong ..." +  e);
    }
    
System.out.println("End I m Here !!! ");
  }
}

O/P :
0
10 Gives the numerator .... MyException: res is zero prints default value ... 
End I m Here !!! 

-------------------------------------------------------------------------------------------------
class MyException extends Exception{
    public MyException(String s){
       super(s);
    }
}
class Hello {
  public static void main (String args[]){
    int i = 10 ;
    int j = 20 ;
    int res = 0;
   //I am trying to manually call a exception ...
    try{
      res = i/j;
      if (res == 0) 
           throw new MyException("Result zero I am printing... ");//throwing new exception by creating an object for MyException class 
    }
    catch(MyException e){
          System.out.println(e);
    }
    catch(Exception e){
       System.out.println(e);
    }

  }
}

O/P :
MyException: Result zero I am printing... 

***********************************************************************************************************************************
Ducking Exception using throws keyword : 

duck an exception - not handle an exception 
Ducking means lower your head in order to avoid being hit or seen . Similar way duck an exception means to avoid your code from being hit from exception .

My method not to be hit by exception , we use throws keyword and call a parent class which can handle the exception .
If you dont duck, then you have to catch it . 

Simple words ...
Ducking an exception doesnt handles the exception , just throws the exception to the calling method .

**************************************************************************************************************************************

class A{
  public void show() throws ClassNotFoundException { // we can write here try catch or throws
   Class.forName("Calc");
  }
}
class Hello {
  static{
    System.out.println("In Static Block ...");
  }
  public static void main (String args[]){

    A obj = new A();
    try {
      obj.show();
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    
    System.out.println("End Of Statement : ");
  }
}

O/P :

In Static Block ...
java.lang.ClassNotFoundException: Calc
        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
        at java.base/java.lang.Class.forName0(Native Method)
        at java.base/java.lang.Class.forName(Class.java:375)
        at A.show(Hello.java:3)
        at Hello.main(Hello.java:14)
End Of Statement : 
                                     
************************************************************************************************************
class Hello {
  public static void main(String[] args)  {
   int i = 0;
   int j = 0;
   int res;
   //Exception is not caught but whatever there in finally block will execute irrespective of Exception .
   try {
    res = i/j;
   }
   finally{
    System.out.println("End Of Statement ... ");
   }
  }
}

O/P :
End Of Statement ... 
Exception in thread "main" java.lang.ArithmeticException: / by zero
        at Hello.main(Hello.java:7)

--------------------------------------------------------------------------------------------------------------------
Buffered Reader along with finally block 

//finally is usually dealt with resources ...

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Hello {
  public static void main(String[] args) throws NumberFormatException, IOException  {
   int num = 0;
   BufferedReader br = null;
   try {
    System.out.println("Enter a num : ");
    InputStreamReader in = new InputStreamReader(System.in);
    br = new BufferedReader(in);//br is a resource , resource should be closed in finally block 
    num = Integer.parseInt(br.readLine());
   }
   finally{
    br.close();
    System.out.println("br is closed successfully ... ");
   }
  }
}

O/P :
Enter a num : 
7
br is closed successfully ... 

------------------------------------------------------------------------------------------------------------
shortend some phrase of the above and it behaves as the same one  --- >

//finally is usually dealt with resources ...

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Hello {
  public static void main(String[] args) throws NumberFormatException, IOException  {
   int num = 0;
   try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {
    System.out.println("Enter a num : ");
    num = Integer.parseInt(br.readLine());
   }
  }
}

---------------------------------------------------------------------------------------------------------------
Using all 5 keywords (try, catch , throw , throws , finally )

Demo.java

package com.testing;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Scanner;

public class Demo{
	public static void main(String args[])  {
		try {
			getCredentials();
		}
		catch (IlakException e){
			System.out.println(e);;
		}
		
		System.out.println("I am alive ... ");
		
	}

	public static void getCredentials() throws IlakException   {
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter username : ");
		String username = scan.next();
		System.out.println("Enter password : ");
		String password = scan.next();
		
		authenticate(username,password);
		
	}

	public static void authenticate(String username, String password) throws IlakException  {
		
		if(username == null || password == null){
			throw new IllegalArgumentException("Please enter a valid username or password");
		}
		
//		if(!username.equals("admin") || !password.equals("password123")) {
//			throw new IOException("Username or password entered is incorrect");
//		}
		
		if(!username.equals("admin") || !password.equals("password123")) {
		throw new IlakException("Username or password entered is incorrect");
	    }
		
		System.out.println("Successfully Authenticated ... ");
	}
}

IlakException.java 

package com.testing;
import java.io.IOException;

public class IlakException extends Exception{
	
	public IlakException(String str) {
  	  super(str);
    }
    public static void main(String[] args) {
      
    }
}

Notes :

--->try is where you write code that might throw exceptions.
--->catch is where you handle exceptions that occur in the try block.
--->throw is used to manually create and throw an exception.
--->throws is used in a method declaration to indicate that the method might throw exceptions, which the caller must handle.

Ultimately, catch is indeed the keyword where the actual handling of exceptions occurs.
