Abstract : 
1)Abstract method - only the declaration of the method is present .To indicate that we provide an abstract keyword .
          -> abstract public void drive();
2)Abstract method should be present in an abstract class 
          ->abstract class Car { }
3)An Object cannot be created for an abstract class .
4)The newly created class which extends from Car should mandatoriy define the abstract method of parent class .If it cannot define then it also should given with prefix of abstract.
5)Abstract class - method declaration is present . Concrete class - method definition of abstract method is present 

Note :
Perspective  What is abstracted?
End User ---> Entire code and logic
Developer	---> Internal implementation of libraries, frameworks, or abstract classes

Example :

List<String> names = new ArrayList<>();
names.add("Alice");

We know add() adds an item.
But you don’t need to know how ArrayList manages memory or resizes its internal array.
That internal logic is abstracted — hidden inside the Java library.

We're seeing the interface or abstract class, which tells you what needs to be done.
But the actual implementation (the how) is in the subclass or library, which may be:

In another file
In a compiled .jar file
Or even in native code (C/C++)
So you don’t always see the full implementation, especially in large systems or frameworks.

--------------------------------------------------------------------------------------------------------------------------
abstract class Car{
abstract public void drive();
abstract public void accelerate();
public void playMusic(){
  System.out.println("Playing Music ....");
}
}
abstract class Zen extends Car{
   public void drive(){
    System.out.println("Zens drives ::: ");
   }
}

//Concrete Class
class ZenEstilo extends Zen{
  public void accelerate(){
    System.out.println("Speed gets increased ...");
  }
}

class Hello {
  public static void main (String args[]){
   Car c1 = new ZenEstilo();
   c1.drive();
   c1.playMusic();
   c1.accelerate();
  }
}

********************************************************************************************************************
Example 2 :

abstract class AncientHuman{
    public abstract void draw();
    public void dance(){
        System.out.println("I am dancing ...");
    }

    public void sing(){
        System.out.println("I am singing ...");
    }
}

class Human extends AncientHuman{

    public void draw() {
        System.out.println("I am drawing ...");
    }

}
class Hello{
 public static void main(String[] args) {
    Human h1 = new Human();
    h1.dance();
    h1.sing();
    h1.draw();
 }
}

************************************************************************************************************


Note :
Abstract class can have both abstract method and non abstract method .

--------------------------------------------------------------------------------------------------------------------
Note Important :

abstract and final class in Java
In Java, you will never see a class or method declared with both final and abstract keywords. 
For classes, final is used to prevent inheritance whereas abstract classes depend upon their child classes for complete implementation. 
In cases of methods, final is used to prevent overriding whereas abstract methods need to be overridden in sub-classes.
