// Datatypes are of 2 types - (Primitive and Non-Primitive datatypes)
Primitive datatypes - Predefined in Java
Non Primitive datatypes - Not Predefined in Java .They are created by the programmers .Also known as reference variables or 
object references. 

1 byte = 8 bits (-128 to 127)  === > -2^(n-1) to 2^(n-1)-1
Int , Double , Char , Boolean
INT :
Int - 4 bytes , Long - 8 bytes , short - 2 bytes , 1 byte 

int a = 10 ;
long l = 1000000l;
short s = 12 ;
byte b = 10 ;

DOUBLE :
Double(Default) - 8 bytes , Float - 4 bytes
double d = 10.0;
float num = 10.2f;

CHAR :
Char - 2 bytes (Java supports unicode , Unicode uses Hexadecimal to express a character )
char c = 'g';

BOOLEAN :
True / False 
boolean b1 = true ;

//literals :
to play with this value 
//A constant value , which can be assigned to a variable either(int , char, float , String) is called literals .

to display a binary value we use 0b or 0B - eg : 0b101
to display an ocatl value we use 0 and followedd by values - eg :  0101
to display a hexa decimal value we use 0x and followed by values - eg : 0x101 , 0x7E

//to have visually clear values we can add underscore inbetween 
class Hello{
    public static void main(String args[]){
        int num = 1_00_00_000;
        System.out.println(num);
    }
}

O/P : 10000000

//Same with Float 
class Hello{
    public static void main(String args[]){
        float num = 1_00_00_000f;
        System.out.println(num);
    }
}

O/P : 1.0E7

//Exponential 
class Hello{
    public static void main(String args[]){
        double num = 12e10;
        System.out.println(num);
    }
}
O/P :
1.2E11

e11 or E11 - simply means 10 to the power raised by 11 

//When we need to calculate power , we should use below one 
class Hello{
    public static void main(String args[]){
        double num = Math.pow(2, 3);

        System.out.println(num);
    }
}

O/P - 8.0

------------------------------------------------------------------------------------------

ASCII Values -> American Standard Code for Information Interchange .
48  0 
49  1         
50  2         
51  3        
52  4      
53  5       
54  6        
55  7        
56  8       
57  9 
.
.
65  A
.
.
.
.
90  Z
97  a
.
.
.
.
122  z

---------------------------------------------------------------------------
class Hello{
    public static void main(String args[]){
        char c = 'a';
        c++;
        System.out.println(c);
    }
}

O/P :
b

*****************************************************************************************************
//Type casting and Conversion 

Conversion - (Implicit conversion)
class Hello{
    public static void main(String args[]){
       byte b = 33 ;
       int a = 100 ;
       a=b;
       System.out.println(a);
    }
}

O/P :
33

byte b = 129;
Note : Byte is in range (-128 to 127 ) if we store value less than that , then compiler will throw error 
Hello.java:3: error: incompatible types: possible lossy conversion from int to byte
       byte b = 129 ;

------------------------------------------------------------------------------------
Casting - (Explicit Conversion)

class Hello{
    public static void main(String args[]){
       int a = 100;
       byte b = 5;
       b=a;
       System.out.println(b);
    }
}
 
Error : Hello.java:5: error: incompatible types: possible lossy conversion from int to byte
        b=a;
Though int value 100 comes in byte range compiler throws error , So we should explicitly say to compiler to store value from bigger datatype range to 
smaller datatype range . 

class Hello{
    public static void main(String args[]){
       int a = 100;
       byte b = 5;
       b=(byte)a;
       System.out.println(b);
    }
}

Now we are able to store value from int -> byte 

Example 1 :
class Hello {
    public static void main(String args[])
    {
       int a = 257 ;
       byte b = 10 ;
       b = (byte)a ;
       System.out.println(b);
    }
}
257 % 256 = value (remainder).

--------------------------------------------------------------
Example 2 :
Float to Int

class Hello{
    public static void main(String args[]){
       float f = 100.245f;
       byte b = 5;
       b=(byte)f;
       System.out.println(b);
    }
}

O/P:
100 
Here we have lost 0.245 value , but we only said compiler to explicitly do though we loose some values .

Example 3 :
Char to byte 

class Hello{
    public static void main(String args[]){
       char c = 'k';
       byte b = 5;
       b=(byte)c;
       System.out.println(b);
    }
}

O/P :
107 
k ascii Value - 107

Byte to Char 

class Hello{
    public static void main(String args[]){
       byte b = 65;
       char c = 'a';
       c=(char)b;
       System.out.println(c);
    }
}

O/P :
A

Example 4 :
Tips : 
=>When we like to store from high range datatype to small , (eg : int->byte) .It performs this in backend .
(given value)%(full range)
=>Integer can have negative values as well .

class Hello{
    public static void main(String args[]){
       int a = 257 ;
       byte b = (byte)a;
       System.out.println(b);
    }
}

O/P:
1

Example 5 :
Doing some operation in small range , the result exceeds the range then we are trying to store in high range 

class Hello{
    public static void main(String args[]){
       byte b1 = 100;
       byte b2 = 100;
       int result = b1*b2;
       System.out.println(result);
    }
}

O/P :
10000
