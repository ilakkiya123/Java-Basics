//Static Variable 
(Example -> 1 room 10 toys ...... Each toy have var - name , color , size .......and making size as static var ie, a common size for all 10 toys )
==>Static Variable is a variable which belongs to the class itself and not to any specific instance .
==>There is only one copy of the variable is present in memory regardless of how many instances are created .
==>In simple terms , Static variable is a one which is shared by all objects 
==>Static var should be access in a static way (to access with class name)
==> Once a var / method uses static keyword , then it becomes class member and not object member .It is stored in metaspace of native heap .

Non Static Method we can use Static variable , but the vice versa is not possible .

//Static Block contains Static variable 
//Static Block Executes only once during the class loading .The static Block always executes first before the main method() in java ,because the compiler 
stores them in memory at the time of class loading before the object creation .

----------------------------------------------------------------------------------------------------------------------
static variable easy explanation :(static var means if a value is assigned to cost then that will be shared by all the object refernce which is having 
cost value or in simple terms it is shared by all objects )
class Hi {
  String name ;
  static int cost=100 ; //Here 1) cost value is 100 . So it will be shared by all objects until it is overrided by other value assigned to same cost var .
  
  public void showAmt(){
     System.out.println("name : " + name + " cost : "+ cost);
  }
}
class Hello {
  public static void main (String args[]){
     Hi h1 = new Hi();
     h1.name = "Ilakkiya";
     h1.cost = 10 ;//Here 2)cost is assigned 

     Hi h3 = new Hi();
     h3.cost = 19 ;//Here 3)cost is again assigned a new val

     Hi h2 = new Hi();
     h2.name = "Kavya";
     h2.cost = 20 ;//Here 4)cost is assigned a final value after which nothing is assigned for this cost variable .So it will give an output of 20 for all 
3 references (h1.cost , h2.cost , h3.cost)

     h1.showAmt();
     h2.showAmt();
     h3.showAmt();
  }
}
Note : static is common for all objects , but not a constant one .
O/P :

name : Ilakkiya cost : 20
name : Kavya cost : 20
name : null cost : 20
-----------------------------------------------------------------------------

class School{
    String std ;
    static String section;
    String stud_name ;

    public void showDetails(){
      System.out.println("The student name is : " + stud_name + " And Section is : " + section + " And Standard is : " + std);
    }
    //static block contains static variable , which is common for all the objects .
    static {
       section = "B" ;
    }

}
class Hello {
  public static void main (String args[]){
    School a = new School();
    a.stud_name = "Ilakkiya";
    a.std = "X";

    School b = new School();
    b.stud_name = "Kavya";
    b.std = "XII";
    
    a.showDetails();
    b.showDetails();

    School.section = "D";
   
  }
}

O/P :
The student name is : Ilakkiya And Section is : B And Standard is : X
The student name is : Kavya And Section is : B And Standard is : XII

[Here the static block is assigned with section value as "B" , So it is commonly taken by both objects 'a' and 'b']


--------------------------------------------------------------------------------------------

class School{
    String std ;
    static String section;
    String stud_name ;

    public void showDetails(){
      System.out.println("The student name is : " + stud_name + " And Section is : " + section + " And Standard is : " + std);
    }

    static {
       section = "B" ;
    }

}
class Hello {
  public static void main (String args[]){
    School a = new School();
    a.stud_name = "Ilakkiya";
    a.std = "X";

    School b = new School();
    b.stud_name = "Kavya";
    b.std = "XII";
    
    School.section = "D"; // Here before calling the showDetails method , static variable is override with section as 'D value' .

    a.showDetails();
    b.showDetails();
   
  }
}

O/P :
The student name is : Ilakkiya And Section is : B And Standard is : X
The student name is : Kavya And Section is : B And Standard is : XII

------------------------------------------------------------------------------------------------------------------
//Everytime we create Object , 2 steps happens 
  ->Class Loads - [ Memory Space Class Loader in JVM ] 
  ->Objects are instantiated .

At this line --- > School a = new School();
             --- > School b = new School();
Execution Steps :
   ->School class gets loads , once loaded it first calls static block , then 'a' obj created , that time it calls constructor of that respective class .
   ->Since School Class is already loaded , Now 'b' obj gets created , again it calls constructor of that respective class .

So static Block is executed first and only once when class loads for the first time and Constructor gets called whenever object gets created .

class School{
    String std ;
    static String section;
    String stud_name ;

    public void showDetails(){
      System.out.println("The student name is : " + stud_name + " And Section is : " + section + " And Standard is : " + std);
    }

    static {
       section = "B" ;
       System.out.println("In Static Block : ");
    }
    //Constructor
    public School(){
      System.out.println("In Constructor : ");
    }

}
class Hello {
  public static void main (String args[]){
    School a = new School();
    a.stud_name = "Ilakkiya";
    a.std = "X";

    School b = new School();
    b.stud_name = "Kavya";
    b.std = "XII";
    
    School.section = "D";

    // a.showDetails();
    // b.showDetails();
   
  }
}

O/P :(So here static block comes only once and constructor comes twice ,as we have 2 objects .)
In Static Block : 
In Constructor : 
In Constructor : 


Another Example :

class Hi{
   static{
    System.out.println("In Hi static Block ::: ");
   }

   public Hi(){
    System.out.println("In Hi constructor ::: ");
   }
}

class Everyone{
    static{
        System.out.println("In Everyone Static Block ::: ");
    }
    public Everyone(){
        System.out.println("In Everyone constructor ::: ");
       }
}

class Excuse {
    static{
        System.out.println("In Excuse Static Block ::: ");
    }
    public Excuse(){
        System.out.println("In Excuse constructor ::: ");
       }
}
class Hello {
    static{
        System.out.println(" In Hello static Block ::: ");
    }
    public static void main(String args[]){
        Hi h1 = new Hi();
        Everyone e1 = new Everyone();
        Excuse e2 = new Excuse();
       
    }
}

Here It checks and first executes static and then constructor of first object and then for other objects as well .So For each class the static block executes
first and only once then constructor gets called .


O/P :
 In Hello static Block ::: 
In Hi static Block ::: 
In Hi constructor :::
In Everyone Static Block :::
In Everyone constructor :::
In Excuse Static Block :::
In Excuse constructor :::

***********************************************************************************************
Class Loader :

What Happens if Object is not created , whether it calls static block and constructor ?
class Hi {
  public Hi(){
    System.out.println("In Hi Constructor ::: ");
  }
  static{
    System.out.println("Hi Static Block ::: ");
  }
}
class Hello {
  public static void main (String args[]) throws ClassNotFoundException{
     Class.forName("Hi");
  }
}
ans : 
Hi obj = new Hi();
Suppose If the above line is not written then Hi class is not loaded , then static block is not gets called , and also since object is not created 
constructor is not get called .

We can explicitly load 'Hi' class by a class named "Class" and its method "forName" .

class Hi{
   static{
      int age = 10;
      System.out.println("In Static ");
   }

   public Hi(){
      System.out.println("In Constructor ");
   }
}
class Hello{
   public static void main(String args[]) throws ClassNotFoundException{
      // Hi h1 = new Hi();
      Class.forName("Hi");
   }
}

O/P:
In Static
**********************************************************************************************
Execution Flow btw Static / Non Static and Default Constrauctor :

//Hello Class created
class Hello { 

  //static block - present below class and above main method or in different class - Once class loads static block contents are stored in memory , 
So class need not be loaded again as it is there in memory .class loads before obj creation .
  static{
    System.out.println("In Static block :");
  }

  //Default Constructor - Once obj created it calls def constructor 
  public Hello(){
    System.out.println("In Default Constructor :");
  }
  public static void main (String args[]){
     Hello h1 = new Hello();
  }
}

*****************************************************************************************************
=>Once we compile , byte code is converted to .class file , which means class is loaded into the memory .
=>Static Block is stored in memory when class gets loaded .

class Hello {
  static{
    System.out.println("Hello class static block ::: ");
  }
  public static void main (String args[]){
    
  }
}

O/P :
Hello class static block ::: 

---------------------------------------------------------------------------------------------------------
Static Method :
Note : 
1)non-static method method() cannot be referenced from a static context 
class Student{
  String name;
  int age;
   public void show(){
    System.out.println("Show method : ");
   }
    public static void show1(){
      System.out.println("Static show method : ");
      System.out.println("Age is : " + age);
    }
}
class Hello{
  public static void main (String args[]){
    Student obj = new Student();
    obj.age = 23;

    Student obj2 = new Student();
    obj2.age = 25;
    
    Student.show();//non static method when we try to call with class name - error throws like this -> non-static method method() cannot be referenced from a static context .
    Student.show1();//static method can be accessed with the class name itself 
  }
}

2)non-static variable age cannot be referenced from a static context (simple word : Inside a static block a non static variables cannot be used )

class Student{
  String name;
  int age;//non static variable 
   public void show(){
    System.out.println("Show method : ");
   }
    public static void show1(){
      System.out.println("Static show method : ");
      System.out.println("Age is : " + age);
    }
}
class Hello{
  public static void main (String args[]){
    Student obj = new Student();
    obj.age = 23;

    Student obj2 = new Student();
    obj2.age = 25;
    
    obj.show();
    obj2.show1();//non static variable passing inside a static block
  }
}

****************************************************************************************
To call static method with class name , and explicitly provide the object reference as generally nonstatic var cannot be passed to static method 

class Student{
  String name;
  static int age;
   public void show(){
    System.out.println("Show method : ");
   }
//Here we have passed obj reference to pass the parameters of obj object 
    public static void show1(Student obj){
      System.out.println("Static show method : ");
      System.out.println("name is : " + obj.name + " Age is : " + age );
    }
}
class Hello{
  public static void main (String args[]){
    Student obj = new Student();
    obj.name = "Ilaks";
    Student.age = 23;

    Student obj2 = new Student();
    obj2.name = "Kavs" ;
    Student.age = 25;
    
    obj.show();
    obj2.show();

    Student.show1(obj);//Indirectly given the values of obj in static method to print nonstatic variable contents .
  }
}

Note :
=>Static variables can be used inside a static method .
=>Non Static variables can be used inside a static method indirectly by passing the objects , So Static method understand which object variables 
we need to print .
------------------------------------------------------------------------------------------------------------------------------------------
How can we access Non Static method ?

A non static method belongs to object of the class , And we have to create object reference or instance of the class to access non static method .


Static Method :
Note : main method is a static method , If we remove static , then it is a non static method ,to access non static method we need to create object .
Since our main method is the starting point of execution , and if static keyword not present , then object cannot be created . So to avoid that we are using
static keyword .

public static void main (String args[]){

}

Note : static class is acceptable only when it comes as an inner class
