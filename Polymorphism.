Polymorphism ---> (Poly - Many) + (Morphism - Forms )
At different situation it behaves differently .
Method Overloading - Compile time
Method overriding - Runtime
Method overloading and Method overriding are the two core concepts in java . They are the way to polymorphism in java .

-----------------------------------------------------------------------------------------------------------
//Here the obj reference is same , method show() is same , but when it is called with diff object , the behaviour is different .
//irrespective of the type of object .
//And this is acceptable only when we have inheritance concept , Parent class having child class .
//A obj = new A() ; obj .show();  ---> A class show gets called .
//B obj = new B() ; obj .show();  ---> B class show gets called .
//C obj = new C() ; obj .show();  ---> C class show gets called .

class Animal{
	public void sound() {
		System.out.println("Animal " );
	}
}
class Cat extends Animal{
	public void sound() {
		System.out.println("Meow meow " );
	}
}

class Dog extends Animal{
	public void sound() {
		System.out.println("Bow Bow " );
	}
}

class Hello{
	public static void main(String args[]) {
		
		Animal ani = new Animal();
		Cat c1 = new Cat();
		Dog d1 = new Dog();
		
		ani.sound();
		c1.sound();
		d1.sound();
		
	}
}

Here with each Class Animal , Cat and Dog differnt sound method is getting called .So Differnt forms/ behavior hat is polymorphism .

**************************************************************************************************************************************


A obj = new A() ; // It creates obj ref for class A and creates new object for class A.
A obj = new B() ; // It creates obj ref for class A and creates new object for class B. So the object connection between 'obj' refernce var and A object is now 
cut and new connection between 'obj' reference and B object is made .

Note : 
By creating an object of class B and assigning it to a reference variable of class A, you can access the methods and variables of class B 
through the reference variable obj.
--------------------------------------------------------------------------------------------------------------------
Dynamic Method Dispatch : 
class A{
   int marks = 10 ;
   public void show(){
    System.out.println("A Marks ::: " + marks);
   }
}

class B extends A{
   public void show(){
    System.out.println("B Marks ::: " + (marks+10));
   }
}

class C extends A{
  public void show(){
    System.out.println("C Marks ::: " + (marks+20));
   }
}

class Hello {
  public static void main (String args[]){
      A obj = new A();
      obj.show();

      obj = new B();
      obj.show();

      obj = new C();
      obj.show();


  }
}

********************************************************************************
Upcasting and Downcasting :
class A{
   public void show(){
     System.out.println("In A show : ");
   }
}
class B extends A{
    public void show2(){
    System.out.println("In B show : ");
    }
}

************************************************************************************************
Class Leader and Assistant own example :

class A{
  int age ;
  String name ;
  public void show(){
    System.out.println("In show ::: " + name + " : " + age );
  }
}
class B extends A{
  public void display(){
    System.out.println("In display ::: " + name + " : " + age );
  }
}
class Hello {
  public static void main(String args[]){
    A obj = new B();
    obj.age = 10 ;
    obj.name = "Ilaks" ;
    obj.show();

    B obj1 = (B)obj ;
    obj1.age = 15;
    obj1.name="Kavs";
    obj1.display();
    
  }
}


*************************************************************************************************

class Hello {
  public static void main (String args[]){
    A obj = (A) new B(); // Upcasting - telling the object B - refer to A  
    obj.show();

    //we are not creating a new Object instead making the obj reference is of type B , by having diff object reference name alone , bt not creating new object .
    B obj2 = (B)obj;
    obj2.show2();  // Downcasting obj reference var previously had type A now we have explicitly brought that down to B type .

  }
}
