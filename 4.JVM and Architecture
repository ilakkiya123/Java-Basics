****************************************************************************************************
Jshell command is introduced from java 9 .
to clear screen - ctrl + L
to exit screen - ctrl + D


Terms to be known :

JSE - Java Standard Edition 
JEE - Java Enterprise Edition / Jakarta Edition  
JME - Java Mobile Edition 

*****************************************************************************************************

Java Application Flow :
                                
.java (code written by developer) -----(Compiler)----> .class (byte code) ---- JVM (Jit Compiler) ---> Native Machine Code ----> RAM ----> CPU ----> O/P 

******************************************************************************************************
JAVA Command :
to compile - javac <filename.java>   , Once compiled a class file will be generated (which is a byte code)
to execute we need JVM and JVM understands byte code .This byte code is present in class file .
to execute - java <class name> which contains main method 

*********************************************************************************************************

Note : 
=>JVM is platform dependent . Different JVM available for different OS .
=>Java is platform independent but JVM not .

Hints : Now the statement Java is platform independent may be contradict as Apple doesnt support jvm for ios .Java cant run on iphones and ipads .Apple makes sure that it only support 
Swift and Objective C has 100 % vendor support on ios .

But some options can be done as alternative .
1)Tool called RoboVM - which allows developers to write java code and then compile it into native code , that can run on ios devices .
2)Tool called J2ObjC - which translates java code to Objective C code , and which can be then compiled and then run on ios devices .


//Hello World Program 
class Hello{
    public static void main(String args[]){
        System.out.println("Hello World !!! ");
    }
}

PS C:\Users\Ilakkiya R\Desktop\Java Practise> javac Hello.java   ------> compile File 
PS C:\Users\Ilakkiya R\Desktop\Java Practise> java Hello         ------> To execute we need jvm - java command followed by class name .
Hello World !!! 

[Hardware[OS[JDK [Jre[  Java Programmer -------> Compiler --------> Byte Code ---------> Jvm]] ------> O/P ]]]

JDK - Java Development Kit 
JRE - Java Runtime Environment 
JVM - Java Virtual Machine (standard library (lang , Object , util , io related class files))
JDK = [JRE  = JVM + libraries]

***********************************************************************************************************************************
class Demo{
public static void main(String args[])
{
System.out.println("Hello World");
}
}

Here , 

public ----> Easily accessible by java code .
static ----> JVM to access main method without creating objects , as objects are created after main method .So using static we can access with class name itself . 
void   ----> Return type of method is void 
main   ----> default name java knows to start the program , it searches for the method name as Demo.main
String args[] -----> It is string of values which we can pass via CLI (Command Line Arguments) or In Run Configuration changing arguments .

If it inside package when running in cmd line need to give proper project details .

C:\Users\Ilakkiya R\eclipse-workspace\FileDemo\src>javac com\ilaks\Demo.java
C:\Users\Ilakkiya R\eclipse-workspace\FileDemo\src>java com.ilaks.Demo ravi sundari
hello in Demo
ravi
sundari

JVM calls main method without args, ----> Demo.main(new String[0]);

JVM calls main method with args , ----> Demo.main(new String[]{"apple", "banana"});


