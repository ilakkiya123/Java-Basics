*****************************************************************************************************
Object - In simple terms it is a copy of specific class , Instance of Java Class .Objects are created in Java by JVM .
(Objects -> Properties and Behavior ) 
It has 3 primary characteristics = > 
       1)Identity - Unique Identifier - represents may be address , id or name .
       2)State - State controls aspect of an object .State changes when behavior happens . State monitors behavior . eg - fan - on / off , low/medium/high
       3)Behavior - It describes what an object can do .Fan turning on , off or changing speeds .
All 3 terms are interrelated .

Example :
Car ...
Identity - Vehicle make model , VIN number .
State    - Car On/Off , Speed
Behavior - Car start / shutdown ,  Accelerate / Decelarate.

Java is an object oriented programming language . Everything in java is an object . Class is like a blueprint for objects . Class - unique name , 
individual class instance and informs what state and behavior it should have .

Tips : In simple terms class is like a blueprint , with the instruction given in class , we can create an object .

--------------------------------------------------------------------------------------------------------------------------
Flow :
Example :

Customer  <-------> Middle Man (mediator) <-------> Carpenter ===> CREATES TABLE 
Java developer <------------- compiler ----------> Bytecode / MC Code  -----------> JVM ===> CREATES OBJECT 
                           (.java ---- > .class) 


---------------------------------------------------------------------------------------------------------------------------

Create new Object - Example 1 
class Sum{
  public void Addition(int i,int j){
     System.out.println(i+j);
  }
}

class Hello{
  public static void main (String arg[]){
    int a = 10;
    int b = 20;
    Sum s = new Sum();//created a new object
    s.Addition(a,b);//calling Addition Method from Hello Class by giving s as reference variable of Sum class
  }
}

Example 2 :
class ToyStore{
    int price1 = 10;
    int price2 = 50 ;
    public String showToys(String t1 , String t2){
        if(price1 >= 70 && price2 >=25)
            return t1 + " : " + price1 + " , " + t2 + " : " + price2;
        return "Give a valid price " ;
    }
}
class Hello {
    public static void main(String args[]){
       String toy1 = "water gun" ;
       String toy2 = "Bubbles" ;
       ToyStore t = new ToyStore();
       String val = t.showToys(toy1,toy2);
       System.out.println(val);
    }
}

Hints : 
In ToyStore Class , In showToys Method , 
===> if block satisfies the condition , it returns the value in return statement and the other return is skipped ,
As compiler sees a return statement it moves out of the particular block .
===> if block doesnt satisfy the condition , it returns the last return of the entire method . 
**********************************************************
Method overloading :[Same method we are trying to call for example "add method" but with differnt count of arguments]

//1)No of Arguments in method
//2)Different datatypes for the argument 


class Addition {
   public void add(int i,int j){
       System.out.println("addTwo : " + (i+j));
   }
   public void add(int i,int j,int k){
       System.out.println("addTwo : " + (i+j+k));
   }
}
class Hello {
  public static void main(String args[]){
    int a =10;
    int b =20;
    int c =30;
    int d =40;
    Addition obj = new Addition() ;
    obj.add(a,b);
    obj.add(a,b,c);
}
}

---------------------------------------------------------------
Instance variable 
==>It has scope inside the entire class and it is declared below the class and above the method.
==>It can be called or assigned values with object reference variable .
==>The life time of instance variable is decided based on the object creation , Once the object is deleted instance goes along with that .
==>Instance variables have unique values for distinct object reference.
==>Instance Variables are a part of Heap Memory .

Example :
class Calc{
 int num = 3;
 String value ;

 public void show(){
    System.out.println("show : " + num);
 }

 public void display(){
    System.out.println("display : " + num);
 }
}
class Hello{
  public static void main(String args[]){
      Calc c1 = new Calc();
      c1.num = 10;
      c1.display();
      c1.show();

      Calc c2 = new Calc();
      c1.num = 15;
      c1.display();
      c1.show();
  }
}

O/P :
display : 10
show : 10
display : 15
show : 15


local variable ---> It has scope inside the method of a particular class .
               --- > Local Variable part of stack (Methods) .

--------------------------------------------------------------------------------------------
Ananymous Object : 

class A{
   public A(){
      System.out.println("Object created : ");
   }

   public void show(){
    System.out.println("In show method ");
   }
}
class Hello {
  public static void main (String args[]){
     //A obj = new A();// this line has 2 steps 
     //A obj - reference variable for class A 
     //new A() - creates a new Object otherwise called as Ananymous Object 

     new A().show();
     new A().show();// if we use individually new A() , then we cant reuse this object .Everytime new Object gets created .
  }
}

O/P :
Object created : 
In show method 
Object created : 
In show method 
               
***********************************************************************************************************
Method Overriding :(Overriding is a feature that allows a subclass to provide a different behaviour for a method which is already present in super class , 
The method present in subclass has the same name , same method and same return type as super class , then the subclass overrides the method in super class .
)

class Calc{
  public int add(int n1 , int n2){
      return n1+n2;  // same add method ,same parameters , same return type .
  }

  public int sub(int n1 , int n2){
      return n1-n2;
  }

  public int mul(int n1 , int n2){
      return n1*n2;
  }

  public int div(int n1 , int n2){
      return n1/n2;
  }
}

class AdvCalc extends Calc{
  public int add(int n1 , int n2){
      int n3 = 10;
      return n1+n2+n3; //same add method ,same parameters , same return type but behavior is different from super class.This method overrides parent class method
  }
}

class Hello {
  public static void main (String args[]) {
     AdvCalc c1 = new AdvCalc();
     int r1 = c1.add(10,20 );
     int r2 = c1.sub(50,20 );
     int r3 = c1.mul(3,20 );
     int r4 = c1.div(60,20 );
     System.out.println(r1 + " " + r2 + " " + r3 + " " + r4 );
  }
}

//Annonation - It is a metadata , which provides information to guide the java interpreter during code translation .
class A{
public void show(){
  System.out.println("In show A");
}
}
class B extends A{
  @Override //Indicates the compiler - suppose if we mistakenly given wrong name compiler guides us
public void show(){
  System.out.println("In show B");
}
}

class Hello{
  public static void main(String[] args) {
    A obj = new B();
    obj.show();
  }
}


