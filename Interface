Interface - It is a blueprint of Class .It has final and static , abstract methods  .
          - It uses implements keyword , which gets the abstract methods only.
          - Suppose If we want to have access variables , then it should be static and final .static so that with class name itself we can access .

Tips :
class - class =>extends
class - interface =>implements
interface - interface =>extends

interface A{
  String name = "Ilakkiya";
  int age = 23;
  public abstract void show();// public abstract is optional
  public abstract void config();//public abstract is optional
}


class B implements A{
  public void show(){
    System.out.println("In show ::: ");
  }
  public void config(){
    System.out.println("In config ::: ");
  }
}
class Hello {
  public static void main (String args[]){
     A obj = new B();
     obj.show();
     obj.config();
     System.out.println(A.name +" - " + A.age);
  }
}

O/P :
In show ::: 
In config ::: 
Ilakkiya - 23

-----------------------------------------------------------------------------------------------------
Whether Class supports Multiple Interface ?
ans : yes 


interface X {
  public void run();
  public void walk();
}

interface Y {
  public void sleep();
}

interface Z extends Y{
}

class B implements X,Z{
  public void run(){
     System.out.println("Running ...");
  }
  public void walk(){
     System.out.println("Walking ...");
  }
  public void sleep(){
    System.out.println("Sleeping ....");
  }
  
}
class Hello {
  public static void main (String args[]){
     X obj = new B(); // Since type 'X' not aware of sleep() , we are creating to obj for same B with different obj reference of type Y .
     obj.run();
     obj.walk();
     Y obj1 = new B();
     obj1.sleep();
  }
}

O/P : 
Running ...
Walking ...
Sleeping ....

***********************************************************************************************************
class Instruments {
   public void playMusic(){

   }
}
class Flute extends Instruments{
  public void playMusic(){
    System.out.println("Playing Flute ... ");
  }
}

class Violin extends Instruments{
  public void playMusic(){
    System.out.println("Playing Violin ... ");
  }
}

class Musician{
  public void playInstrument(Instruments v1){
    v1.playMusic();
  }
} 

class Hello {
  public static void main(String args[]){
     Instruments v1 = new Violin(); //Here we write Instruments to get all the variables , v1 ov=bj reference of Violin object
     Instruments f1 = new Flute();

     Musician m1 = new Musician();
     m1.playInstrument(v1);
  }
}

------------------------------------------------------------------------------------------
Here for the above objects we have replaced normal class with interface as the Instruments method is not implemented .

interface Instruments {
   public abstract void playMusic();
}
class Flute implements Instruments{
  public void playMusic(){
    System.out.println("Playing Flute ... ");
  }
}

class Violin implements Instruments{
  public void playMusic(){
    System.out.println("Playing Violin ... ");
  }
}

class Musician{
  public void playInstrument(Instruments v1){
    v1.playMusic();
  }
} 

class Hello {
  public static void main(String args[]){
     Violin v1 = new Violin(); 
     Instruments f1 = new Flute();

     Musician m1 = new Musician();
     m1.playInstrument(v1);
  }
}

O/P :
Playing Violin ... 

//Functional Interface :
//Functional Interface - It contains only one abstract method in interface .Also known as Single Abstract Method Interface - SAM 
@FunctionalInterface
interface A{
  public void show();
  //public void run(); - After giving annotation it guides us like mistakenly we have written more than one method in interface .
}


class B implements A{
  public void show(){
    System.out.println("In show ::: ");
  }
}
class Hello {
  public static void main (String args[]){
     A obj = new B();
     obj.show();
  }
}

we can also do the above with ananymous object 

//Functional Interface - It contains only one abstract method in interface .Also known as Single Abstract Method Interface - SAM 
@FunctionalInterface
interface A{
  public void show();
  //public void run(); - After giving annotation it guides us like mistakenly we have written more than one method in interface .
}


// class B implements A{
//   public void show(){
//     System.out.println("In show ::: ");
//   }
// }
class Hello {
  public static void main (String args[]){
    //we are not creating new class to write impl so that we can access by creating obj for a class , instead ananymous obj
     A obj = new A(){
        public void show(){
    System.out.println("New show ::: ");
  }
     };
     obj.show();
  }
}

O/P : 
New show :::

***************************************************************************************
Lambada Expression : Similar to Arrow fn in javascript 
//Functional Interface - It contains only one abstract method in interface .Also known as Single Abstract Method Interface - SAM 
@FunctionalInterface
interface A{
  public void show();
}


class Hello {
  public static void main (String args[]){
    //For single line statement we can remove curly bracket as well 
     A obj = ()->System.out.println("New Show ::: ");
     obj.show();
  }
}

lamda expression with parameters return type : void 
//Functional Interface - It contains only one abstract method in interface .Also known as Single Abstract Method Interface - SAM 
@FunctionalInterface
interface A{
  public void show(int i );
}


class Hello {
  public static void main (String args[]){
    //For single line statement we can remove curly bracket as well 
     A obj = i->System.out.println("New Show ::: " + i);
     obj.show(8);
  }
}

O/P :
New Show ::: 8

-----------------------------------------------------------------------
lamda expression with parameters return type : int

//Functional Interface - It contains only one abstract method in interface .Also known as Single Abstract Method Interface - SAM 
@FunctionalInterface
//Here If we have more than 2 methods ,ananymous cant decide which method to call , So it should have only 1 method
interface A{
  public int show(int i , int j);
}


class Hello {
  public static void main (String args[]){
//Here it had return statement , but it is not required as it is an expression after lamda expression it directly returns the value     
A obj = (i , j ) -> (i+j);
     int result = obj.show(8,9);
     System.out.println(result);
  }
}

Tips :
*Lambda Expression works only with Functional Interface .

Types Of Interface :
1)Normal Interface -Interface which has two or more than two abstract methods in Interface .
2)Functional Interface or SAM - Interface which has only one abstract method .
3)Marker Interface - serialization and deserialization concept comes .
object datas are stored in hardware and if required we can get our data from hardware .(Game restart)
