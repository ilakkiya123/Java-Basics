Stream :
It is a series of Elements that can be processed in series or parallel to perform various operations .It is a part of java.util.Stream package and performs various functional 
approach to process the collection of Objects .

For a Stream a source can be a Collection , Arrays , I/O Channel .
Intermediate Operations : Operations that turn a stream to an another stream like filter() , map() , sorted() .These operations are called lazy meaning they are not exectued , until a terminal operation is 
invoked .

Terminal Operations : Operations that produce result / side effects such as collect() , forEach() , reduce() .Once a terminal operation is performed the stream is considered as consumed and 
can no longer be used again .

Stateless : Operations like filter() , map() does on rely on any state from previous element .
Stateful  : Operations like sorted() , distinct that may require processing all elements to produce a result .

Intermediate Operations :
filter(Predicate) - Filter Elements based on a condition
map(Function) 	  - Transform Elements to another form 
distinct()        - Removes Duplicate Elements 
sorted()          - Sorts Elements by a natural order or by a comparator .
limit(long n)     - Truncates the Stream to the First n Elements 
skip(long n)      - Skips the first n Elements 

Terminal Operations :
forEach(Consumer) - Performs an operation for Each Element .
reduce(BinaryOperator) - Combines element to produce a single result .
collect(Collector)     - Converts stream into List , Map , Set and other DataStructure .
count()                - Counts the number of Elements in the Stream 
findFirst()            - Finds the First Element in the Stream
findAny()              - Finds Any Element in the Stream

Benefits of using Streams :

--->Simplifies code by removing the needd for using explicit loops and conditionals .
--->Lazy Evaluation - Intermediate Operations are not executed until a terminal operation is invoked which can improve performance .
--->Streams are clean , concise and have efficient code to process collection of Objects .
--->They are particulary powerful when combined with lambda expressions and functional interface .

Normal For Loop :

package com.ilaks.DemoProj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Demo{
	public static void main(String args[]) {
		List<Integer> nums = Arrays.asList(3,4,2,8,9,11,10);

//normal for loop
//		for(int i=0;i<nums.size();i++) {
//			System.out.println(nums.get(i));
//		}

//Enhanced for loop
//		for(int n : nums) {
//			System.out.println(n);
//		}

ForEach Loop 
		nums.forEach(n->System.out.println(n));
		
	}
}


Stream :
Contains the value as similar to list in streams . Once used Stream cannot be reused .Take like Stream of water , once touched water cant be touched again .

package com.ilaks.DemoProj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Stream;

class Demo{
	public static void main(String args[]) {
		List<Integer> nums = Arrays.asList(3,4,2,8,9,11,10);
		
		Stream<Integer> s1 = nums.stream();
		Stream<Integer> s2 = s1.filter(n -> n%2 == 0);
		Stream<Integer> s3 = s2.map(n -> n*2);
		int value = s3.reduce(0 ,(c,e) -> (c+e));
		
//		s3.forEach(n -> System.out.println(n));
		System.out.println(value);
	}
}

Here now we will deep dive into each method and how it is derived ,

----------------------------------------------------------------------
  Predicate<Integer> p = new Predicate<>() {

			@Override
			public boolean test(Integer n) {
				return n%2 == 0 ;
			}
			
		};

After doing lambda expression the above becomes as , 

Predicate<Integer> p = n ->  n%2 == 0 ;

Since p is that value we are placing the value directly here ,
Stream<Integer> s2 = s1.filter(n -> n%2 == 0);

--------------------------------------------------------------------

Function<Integer , Integer> f = new Function<>() {
			@Override
			public Integer apply(Integer n) {
				 return n*2;
			}
		};

After doing lambda expression the above becomes as , 

Function<Integer , Integer> f = n -> n*2;
Since f is that value , we are placing the value directly here , 

Stream<Integer> s3 = s2.map(n -> n*2);

-----------------------------------------------------------------------

BinaryOperator<Integer> accumulator = new BinaryOperator<>() {

			@Override
			public Integer apply(Integer c, Integer e) {
				// TODO Auto-generated method stub
				return c+e;
			}
		};

After doing lambda expression the above becomes as , 

BinaryOperator<Integer> accumulator = (c, e) -> c+e;

Since accumulator is that value , we are placing the value directly here , 
int value = s3.reduce(0 ,(c, e) -> c+e);

-----------------------------------------------------------------------------
Now after knowing it deeply we can combine everything in a single line 

package com.ilaks.DemoProj;

import java.util.Arrays;
import java.util.List;

class Demo{
	public static void main(String args[]) {
		List<Integer> nums = Arrays.asList(3,4,2,8,9,11,10);
		
		
		
		int value = nums.stream()
				.filter(n -> n%2 == 0)
				.map(n -> n*2)
				.reduce(0 ,(c, e) -> c+e) ;
		System.out.println(value);
		
 }
}

O/P :

48

----------------------------------------------------------------------------
sorted :

package com.ilaks.DemoProj;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

class Demo{
	public static void main(String args[]) {
		List<Integer> nums = Arrays.asList(3,4,2,8,9,11,10);
		
//		Stream<Integer> s1 = nums.stream()
//				.filter(n -> n%2 == 0)
//				.map(n -> n*2).sorted();
//		s1.forEach(n -> System.out.println(n));
		
		Stream<Integer> s1 = nums.stream().sorted();
	    s1.forEach(n -> System.out.println(n));
		
 }
}

O/P :

2
3
4
8
9
10
11

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Stream Creation from Collection , 

package com.ilaks;

import java.util.Arrays;
import java.util.List;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class Main {
	public static void main(String args[]) {
		List<Integer> nums = Arrays.asList(8,3,9,4,2,1,6,5,6);
		
		Stream<Integer> s1 = nums.stream();    
		Stream<Integer> s2 = s1.filter(n -> n%2 == 0);
		Stream<Integer> s3 = s2.map(n-> n*2);
		Stream<Integer> s4 = s3.distinct(); 
		
		long value = s4.count();
		System.out.println(value);
		
	}
}


Stream Creation from Arrays , 


