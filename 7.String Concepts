//Strings - NON PRIMITIVE DATATYPE

//String is an object that represents sequence of characters and not a primitive datatype so it starts with upper case unlike (int,double,boolean ...)
//Normal way of storing string in a variable 
class Hello {
  public static void main (String args[]){
    String name = "Ilakkiya" ;
    System.out.println(name);
  }
}

-----------------------------------------------------------------------------------
//Since it comes under class type , usually we need to use 'new' keyword , but java accepts simply w/o new keyword as well .
class Hello {
  public static void main (String args[]){
    String name = new String("Ilakkiya") ;
    System.out.println(name);
  }
}

-------------------------------------------------------------------------------------------------------------
2 scenerios :
Scenerio 1 : What happens if we save same string to 2 different object reference , by using new keyword .'new' Keyword Objects are created in runtime .

class Hello {
  public static void main(String args[]){
      String h1 = new String("Ilaks");
      String h2 = new String("Ilaks");
      System.out.println(h1==h2);
  } 
}

O/P : false
It returns false value , because when new keyword comes then object creates in runtime (heap memory) as well as string constant pool .
In heap memory there is no rules like duplicate values shouldnt be created , hence 2 obj is created.

Scenerio 2 : What happens if we have same string to 2 different object reference , without using new keyword 

class Hello {
  public static void main(String args[]){
      String h1 = "Ilaks";
      String h2 = "Ilaks";
      System.out.println(h1==h2);
  } 
}

O/P : true
It returns true value , because new keyword is not present so object is not created in runtime (heap memory).It creates only in string constant pool .
In String constant pool "Ilaks" String is already present , so no new Object is created ,If new Object ref is created with same string then it maps to 
same object .
-----------------------------------------------------------------------------------
String Methods :

class Hello {
  public static void main (String args[]){
    String name = "Ilakkiya is my name";
    System.out.println(name.concat(" And Kavya is my sister"));//concat method
    System.out.println("Hi!!! " + name);//String append using '+' operator
    System.out.println(name.hashCode());//String hashcode
    System.out.println(name.charAt(12));//charAt helps to find the char present at given index number including space starts with '0' index
    System.out.println(name.indexOf("my"));//indexOf helps to find the particular string position 
  }
}

-----------------------------------------------------------------------------------------------------------------------------------

Strings are immutable to overcome this we have String Buffer and String Builder .

Strings - Immutable 
String Buffer & String Builder - Mutable 

Example to show String is Immutable :

class Hello{
  public static void main(String args[]) {
    String s1 = "Ilaks";
    String s2 = s1.concat(" Ravindran");
    System.out.println(s1);
    System.out.println(s2);
    System.out.println(s1 == s2);
  }
}

O/P :
Ilaks
Ilaks Ravindran
false

Example to show StringBuffer is Mutable :
class Hello{
  public static void main(String args[]) {
    StringBuffer sb1 = new StringBuffer("Ilakkiya");
    StringBuffer sb2 = sb1.append(" Ravindran");

    System.out.println(sb1);
    System.out.println(sb2);
    System.out.println(sb1 == sb2);
  }
}

O/P :
Ilakkiya Ravindran
Ilakkiya Ravindran
true


-------------------------------------------------------------------------------------
String Buffer :(Usually StringBuffer capacity is 16 character capacity )
//To make continous memory allocation , it creates 16 extra character space along with length of the string 
class Hello {
  public static void main (String args[]){
    StringBuffer s = new StringBuffer("Ilakkiya"); // Makes Mutable Strings
    System.out.println(s.capacity()); // Now capcity 24 - > 16(Default capacity)+8(Ilakkiya) 
  }
}

---------------------------------------------------------------------------------------
String Buffer :
class Hello {
  public static void main (String args[]){
    StringBuffer s = new StringBuffer("Ilakkiya");
    System.out.println(s.capacity());
    System.out.println(s.length());
    System.out.println(s.append((" Ravindran")));
    System.out.println(s.insert(9, "Kavya "));
    System.out.println(s.deleteCharAt(5));
    String str = s.toString() ;
    System.out.println(str);
    s.setLength(30);
    s.ensureCapacity(15);
    System.out.println(s.length());
    System.out.println(s.capacity());
  }
}

---------------------------------------------------------------------------------------------
We can set length manually and then print the string which is above the given length , then the end of the strings will be removed 

class Hello{
  public static void main(String args[]){
    
    StringBuffer s1 = new StringBuffer("12345678");
    s1.setLength(5);
    System.out.println(s1.length());
    System.out.println(s1);

  }
}

O/P :
5 
12345


