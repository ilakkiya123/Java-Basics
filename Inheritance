//Super - Sub Class , base - derived class , parent - child class
Inheritance - Use the features of super class .It is a mechanism in which one object acquires all the properties and behavior of parent class .


//Note : Like Below we have 2 classes Calc and Hello . But when we compile we can see only Hello.class file and not Calc.class file as its object is not present .
class Calc{
  public int add(int n1 , int n2){
      return n1+n2;
  }

  public int sub(int n1 , int n2){
      return n1-n2;
  }
}
class Hello {
  public static void main (String args[]){
      //Calc c1 = new Calc(); //when I remove this commented line , then calc class also gets loaded .
  }
}

****************************************************************************************************
Example 1 : (Calculator function)
Hello.java
class Calc{
  public int add(int n1 , int n2){
      return n1+n2;
  }

  public int sub(int n1 , int n2){
      return n1-n2;
  }
}

class Hello {
  public static void main (String args[]) throws ClassNotFoundException{
     VeryAdvCalc c1 = new VeryAdvCalc();
     int r1 = c1.add(10,20 );
     int r2 = c1.sub(50,20 );
     int r3 = c1.mul(3,20 );
     int r4 = c1.div(60,20 );
     int r5 = c1.power(5,2);
     System.out.println(r1 + " " + r2 + " " + r3 + " " + r4 + " " + r5);
  }
}
Advcalc.java
class Advcalc extends Calc{
   public int mul(int n1 , int n2){
      return n1*n2;
  }

  public int div(int n1 , int n2){
      return n1/n2;
  }
}
VeryAdvCalc.java
class VeryAdvCalc extends Advcalc{
    public int power(int n1 , int n2){
        return (int)(Math.pow(n1, n2));
    }
}
javac Hello.java
java Hello

O/P:
30 30 60 3 25

----------------------------------------------------------------------------------------------------------------
Example 2 (Tiffen and Drinks) 

Hello.java 
class Hello{
  public static void main(String args[]){
      Tiffen t1 = new Tiffen();
      int Tiffenrate = t1.tiffenRate(0, 0);
      int Drinksrate = t1.drinkRate(1,0);
      System.out.println("Bill Amount for Table 5 : " + (Tiffenrate + Drinksrate));
  }
}

Tiffen.java 
public class Tiffen extends Drinks{
    int idly_price = 30;
    int dosa_price = 100;
    public int tiffenRate(int idly_count , int dosa_count){
        int rate = (idly_count*idly_price) + (dosa_count*dosa_price);
        return rate;
    }
}

Drinks.java 
public class Drinks {
        int coffee_price = 25;
        int tea_price = 20;
        public int drinkRate(int coffee_count , int tea_count){
            int rate = (coffee_count*coffee_price) + (tea_count*tea_price);
            return rate;
    }
}
****************************************************************************************************************
Single Inheritance : Consists of 1 parent class and 1 child class . Child Class Inheterits parent class's method and data variables .   Calc(parent Class) <- Advcalc(child class)
Multi Level Inheritance : It has the involvement of atleast 2 or more than 2 classes .One class inherits methods and dats from parent class , And now the subclass becomes the base class for the newly created 
class.  Calc(parent Class) <- Advcalc(child class)
                              Advcalc(parent class) <- VeryAdvClass(child class)

*************************************************************************************************
Why Multiple Inheritance is not possible in Java ?

A(parent)         B(parent)
x()               x()    ->Common Method in both A and B parent 

        C(child)

If suppose there is a common method in both A and B , then C.x() is a problem .Compiler doesnt know which super class method to execute ,and that leads to an ambiguity .
So for that purpose , Java doesnt support Multiple Inheritance but multilevel inheritance is possible .

Multiple Inheritance is similar to getting the genetics from different person at a same time for a single person 
